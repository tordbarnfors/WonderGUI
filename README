
QUICK START GUIDE TO CONFIGURE YOUR ENVIRONMENT AND BUILD WONDERGUI
===================================================================

WonderGUI uses CMake as its configuration and build system. Through CMake you
can easily create build- and project-files for your specific platform and 
development environment.

The base CMakeLists.txt is locatd in src/

To create project files for your environment, create your binary directory,
step into it and run cmake, like this:

mkdir build
cd build
cmake ../src

This will generate the project files for your IDE (if not, use the -G switch
and specify your generator, cmake --help will display all generators available
on your system).

The WonderGUI CMake files have been tested on Linux, Windows and OSX with 
several IDEs and development environments, see sections below for instructions
specific to your OS and development environments.


Running and debugging included applications
-------------------------------------------

Nearly all tools and example programs loads files from the resources/ directory 
and needs to be run from the WonderGUI directory to find them. Failure to find 
the resources-directory will result in an error message or crash.

So, in order to be able to run and debug these programs from within your IDE
you need to specify your debugger working path to the WonderGUI directory. 


*********************************************
**** SATISFYING DEPENDENCIES FOR YOUR OS ****
*********************************************

WonderGUI and everything related requires C++11 or higher.

The WonderGUI base library (wondergui.lib) doesn't have any external 
dependencies, but separate addon libraries, example files and tools do.
There is a list of all build targets and their dependencies at the end of this
document.

Depending on your OS we recommend the following approaches to satisfy all
dependencies:


Linux
=====

All dependencies should be satisfied by your package manager. Just search,
download and install the following packages:

libsdl2-dev
libsdl2-image-dev
libfreetype6-dev
libglew-dev


Windows
=======

My CMake script expects all dependencies to be found in the WonderGUI 
directory. Just extract dependency-packages/wondergui-dev-additions-win.zip 
into the WonderGUI directory and you have everything setup.


Mac OSX
=======

1. Download the SDL2 framework from libsdl.org and copy it to 
   /Library/Frameworks (or to <Your home directory>/Library/Frameworks if 
   your access priviliges are not high enough).

2. The libraries SDL2_image and freetype are also needed and are supplied in
   dependency-packages/wondergui-dev-additions-osx.zip. Extract the content of
   the package and copy the freetype folder to the WonderGUI directory.

   Copy SDL2_image.framework to the same directory as the SDL2 framework.
   
   Worth noting is also that I had some problems with priviliges for SDL_image
   since the package wasn't correctly signed. I therefore had to run the following
   command:

   xattr -dr com.apple.quarantine /Library/Frameworks/SDL2_image.framework


**************************************************
**** CONFIGURING YOUR DEVELOPMENT ENVIRONMENT ****
**************************************************

Below is a list of development environments that are maintaned in and
tested with our CMake scripts. But since we are using CMake, any environment
decently supported by CMake should work decently. 


Visual Studio (not VSCode)
==========================

Visual Studio can be used in two ways:

1. You generate WonderGUI.sln using CMake and use that project.

2. You open the WonderGUI directory in Visual Studio. Visual Studio will
   notice it is a CMake project and set it up as such.

I recommend you use #1, since that will setup your debugger working directory
correctly so that you can run (and debug) the example files and tools from
Visual Studio. Both ways works for just building stuff though.



Visual Studio Code (VSCode)
===========================

Have the CMake module installed.

Open the WonderGUI directory in Visual Studio code. You should be asked to
locate CMakeLists.txt which is located in src/. After this, VSCode gets stuck on
"Saving open files" on my machines for unknown reason. Just restart VSCode and
configuration will continue and complete.

After that, everything should be setup for you and you should be able to build
all included projects. In order to run/debug the tools and examples you will
need to setup a launch.json file. If you are using VSCode you should know how
to do that.


Linux Console (Makefiles, Ninja etc.)
=====================================

No special instructions needed. Keep in mind that most tools and example files 
needs to be run from the WonderGUI directory since they need files in the
resources/ directory. Failing to find them, some might print an understandable
error message while others will just crash.


XCode
=====

Download, install and use CMake to generate the XCode project file. If you are 
unfamiliar with CMake, this is how I recommend you to do it:

1. Make sure to satisfy the dependencies as described above.
2. Click "Browse Source..." and navigate to WonderGUI/src.
3. Create a directory named "build" in WonderGUI/. Click "Browse Build..." and
   select it.
4. Click Configure, select Xcode as generator for this project and make sure 
   everything goes through well. The table in the the middle of the window 
   gets some text with red background. This is normal and only CMakes way to 
   say that these values have been updated.
5. Click Generate.

You should now have a fully working XCode project in WonderGUI/build. 


********************************
**** ADDITIONAL INFORMATION ****
********************************

WonderGUI directory structure
=============================
		
doc/
        Contains a Doxyfile for building the documentation with doxygen.
        Will be populated with generated API documentation when running 
        doxygen.
		
resources/
        Various files such as fonts and bitmaps used by the included
        examples and tools.

scripts/
        Various scripts used for WonderGUI development. Undocumented
        and useless for you unless you intend to hack on WonderGUI.
		
src/
        The source tree containing all source code of this package.



Build targets and their dependencies
====================================


wondergui       - The WonderGUI base library, containing the framework
                  and all widget. No dependencies.

wgfreetypefont  - Addon library for vector fonts using FreeType.
                  Requires FreeType to build.

wgopenglgfx     - Addon library for OpenGL rendering of UI.
                  Requires OpenGL and GLEW.

wgsoftgfx       - Addon library for generic software rendering of UI.
                  No external dependencies, but kept separately since
                  it is a fairly big library.

wgmetalgfx      - Addon library for rendering UI using Apples Metal API.
                  No external dependencies, except a Mac of course!

example01       - Minimal example program.
                  Requires SDL (SimpleDirectMediaLayer, see libsdl.org)

workbench       - My messy program for testing out things.
                  Requires OpenGL, GLEW, FreeType, SDL and SDL_Image.

gfxdevicetester - Program for testing graphics devices for bugs and
                  comparing them for speed and consistency.
                  Currently requires OpenGL, GLEW, FreeType, SDL and SDL_Image.

unittester      - Simple console application to run some simple unit tests
                  on parts of WonderGUI. No requirements.

