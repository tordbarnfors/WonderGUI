WELCOME TO WONDERGUI!
=====================

(I will write some nice introduction text here someday, I promise! ;)



Building WonderGUI
==================

WonderGUI uses CMake as its configuration and build system. Through CMake you
can easily create build- and project-files for your specific platform and 
development environment.

The base CMakeLists.txt is locatd in src/

To create project files for your environment, create your binary directory,
step into it and run cmake, like this:

mkdir build
cd build
cmake ../src

This will generate the project files for your IDE (if not, use the -G switch
and specify your generator, cmake --help will display all generators available
on your system).

The WonderGUI CMake files have been tested with several build environments for
specific information and instructions regarding these environments, check the
specific sections at the end.



Build targets and their dependencies
====================================

WonderGUI and everyting related requires C++11 or higher.

The WonderGUI base library (wondergui.lib) has no external dependencies. 

Separate addon libraries, example files and tools do have dependencies though.
Below is a list of all build targets and their dependencies.


Build targets:
--------------

wondergui       - The WonderGUI base library, containing the framework
                  and all widget. No dependencies.

wgfreetypefont  - Addon library for vector fonts using FreeType.
                  Requires FreeType to build.

wgopenglgfx     - Addon library for OpenGL rendering of UI.
                  Requires OpenGL and GLEW.

wgsoftgfx       - Addon library for generic software rendering of UI.
                  No external dependencies, but kept separately since
                  it is a fairly big library.

wgmetalgfx      - Addon library for rendering UI using Apples Metal API.
                  No external dependencies, except a Mac of course!

example01       - Minimal example program.
                  Requires SDL (SimpleDirectMediaLayer, see libsdl.org)

workbench       - My messy program for testing out things.
                  Requires OpenGL, GLEW, FreeType, SDL and SDL_Image.

gfxdevicetester - Program for testing graphics devices for bugs and
                  comparing them for speed and consistency.
                  Currently requires OpenGL, GLEW, FreeType, SDL and SDL_Image.

unittester      - Simple console application to run some simple unit tests
                  on parts of WonderGUI. No requirements.


Satisfying dependencies
=======================

To build everything you need the development libraries and header files
for the following packages installed:

SDL       ( Simple DirectMedia Layer, see libsdl.org, used by tools and 
            examples but not by any library )

SDL_Image ( Image loading library for SDL, used only by some tools )

freetype  ( Font rendering library, used by wgfreetypefont, tools and examples )

OpenGL    ( Used by wgopenglgfx and some tools )

GLEW      ( An OpenGL wrapper, used by wgopenglgfx and some tools )


Depending on your OS we recommend the following approaches:


Linux
-----

All dependencies should be satisfied by your package manager. Just search,
download and install.


Windows
-------

CMake will search for the packages in the WonderGUI root directory and expects
a certain directory naming/structure.

Easiest for you is to download and unzip my Windows development support package
into the WonderGUI root directory.


Mac OSX
-------

1. Download the SDL framework from libsdl.org and copy it to 
   /Library/Frameworks, or to <Your home directory>/Library/Frameworks if 
   your access priviliges are not high enough.

2. Download the SDL_image 2.0 framework from 
   https://www.libsdl.org/projects/SDL_image/ and copy it to the same location.

3. You also need the freetype library and header files. I have 



Running and debugging included applications
===========================================

Nearly all tools and example programs loads files from the resources/ directory 
and needs to be run from the WonderGUI root directory to find them. Failure to
find the resources-directory will result in an error message or crash.

So, in order to be able to run and debug these programs from within your IDE
you need to specify your debugger working path to the WonderGUI root directory 
(the directory containing src/ resources/ etc.)


Directory structure
===================
		
doc/
        Contains a Doxyfile for building the documentation with doxygen.
        Will be populated with generated API documentation when running 
        doxygen.
		
resources/
        Various files such as fonts and bitmaps used by the included
        examples and tools.

scripts/
        Various scripts used for WonderGUI development. Undocumented
        and useless for you unless you intend to hack on WonderGUI.
		
src/
        The source tree containing all source code of this package.


*******************************************************
**** DEVELOPMENT ENVIRONMENT SPECIFIC INSTRUCTIONS ****
*******************************************************

Note! Also read section "Satisfying dependencies" for instructions on how to
quickly and easily setup everyting.


Visual Studio (not VSCode)
==========================

Visual Studio can be used in two ways:

1. You generate WonderGUI.sln using CMake and use that project.

2. You open the WonderGUI root directory in Visual Studio. Visual Studio will
   notice it is a CMake project and set it up as such.

I recommend you use #1, since that will setup your debugger working directory
correctly so that you can run (and debug) the example files and tools from
Visual Studio. Both ways works for just building stuff though.



Visual Studio Code (VSCode)
===========================

Have the CMake module installed.

Open the WonderGUI root directory in Visual Studio code. You should be asked to
locate CMakeLists.txt which is located in src/. After this, VSCode gets stuck on
"Saving open files" on my machines for unknown reason. Just restart VSCode and
configuration will continue and complete.

After that everything should be setup for you and you should be able to build
all included projects. In order to run/debug the tools and examples you will
need to create a launch.json file. If you are usnig VSCode you should know how
to do that.



Linux Console (Makefiles, Ninja etc.)
=====================================

No special instructions needed. Keep in mind that most tools and example files 
needs to be run from the WonderGUI root directory since they need files in the
resources/ directory. Failing to find them, some might print an understandable
error message while others will just crash.


XCode
=====

Download, install and use CMake to generate the XCode project file. If you are 
unfamiliar with CMake, this is how I recommend you to do it:

1. Click "Browse Source..." and navigate to WonderGUI/src.
2. Create a directory named "build" in WonderGUI/. Click "Browse Build..." and
   select it.
3. Click Configure and make sure everything goes through well. The table in
   the the middle of the window gets some text with red background. This is
   normal and only CMakes way to say that these values have been updated.
4. Click Generate.

You should now have a working XCode project in WonderGUI/build. 

In order to build all included projects you need to satisfy their dependencies
see section above for that.

In order to run/debug tools and example files you will need to set the debug path to
WonderGUI. Otherwise they won't find the files they need (located in WonderGUI/resources).








Happy Hacking, and let me know if you run into any problems!

Tord Jansson
tord@nordicuitech.com

