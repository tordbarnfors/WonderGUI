/*=========================================================================

                         >>> WonderGUI <<<

  This file is part of Tord Jansson's WonderGUI Graphics Toolkit
  and copyright (c) Tord Jansson, Sweden [tord.jansson@gmail.com].

                            -----------

  The WonderGUI Graphics Toolkit is free software; you can redistribute
  this file and/or modify it under the terms of the GNU General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

                            -----------

  The WonderGUI Graphics Toolkit is also available for use in commercial
  closed-source projects under a separate license. Interested parties
  should contact Tord Jansson [tord.jansson@gmail.com] for details.

=========================================================================*/

#include <wg_metalgfxdevice.h>

namespace wg {


const char MetalGfxDevice::shaders[] =

"\n"
"#include <metal_stdlib>\n"
"using namespace metal; \n"
"\n"
"\n"
"//____ Vertex ___________________________________________________\n"
"\n"
"typedef struct\n"
"{\n"
"    vector_int2     coord;\n"
"    int             extrasOfs;              // Offset into extras buffer.\n"
"    vector_float2   uv;\n"
"} Vertex;\n"
"\n"
"//____ Uniform ______________________________________________\n"
"\n"
"typedef struct             // Uniform buffer object for canvas information.\n"
"{                               // DO NOT CHANGE ORDER OF MEMBERS!!!\n"
"    vector_float2   canvasDim;\n"
"    int        canvasYOfs;\n"
"    int        canvasYMul;\n"
"\n"
"    vector_float4 flatTint;\n"
"\n"
"    vector_int2     tintRectPos;\n"
"    vector_int2     tintRectSize;\n"
"\n"
"    vector_float4   topLeftTint;\n"
"    vector_float4   topRightTint;\n"
"    vector_float4   bottomRightTint;\n"
"    vector_float4   bottomLeftTint;\n"
"\n"
"    vector_int2     texSize;\n"
"} Uniform;\n"
"\n"
"\n"
"//____ PlotFragInput ______________________________________________\n"
"\n"
"typedef struct \n"
"{\n"
"    float4 position [[position]];\n"
"    float pointSize [[point_size]];\n"
"    float4 color;\n"
"} PlotFragInput;\n"
"\n"
"//____ LineFromToFragInput ______________________________________________\n"
"\n"
"typedef struct \n"
"{\n"
"    float4 position [[position]];\n"
"    float4 color;\n"
"    float s;\n"
"    float w;\n"
"    float slope;\n"
"    float ifSteep;\n"
"    float ifMild;\n"
"\n"
"} LineFromToFragInput;\n"
"\n"
"//____ FillFragInput ______________________________________________\n"
"\n"
"typedef struct \n"
"{\n"
"    float4 position [[position]];\n"
"    float4 color;\n"
"} FillFragInput;\n"
"\n"
"//____ FillAAFragInput ______________________________________________\n"
"\n"
"typedef struct \n"
"{\n"
"    float4 position [[position]];\n"
"    float4 color;\n"
"    float4 rect;\n"
"} FillAAFragInput;\n"
"\n"
"\n"
"//____ BlitFragInput ______________________________________________\n"
"\n"
"typedef struct \n"
"{\n"
"    float4 position [[position]];\n"
"    float4 color;\n"
"    float2 texUV;\n"
"} BlitFragInput;\n"
"\n"
"//____ ClutBlitInterpolateFragInput ______________________________________________\n"
"\n"
"typedef struct \n"
"{\n"
"    float4 position [[position]];\n"
"    float4 color;\n"
"    float2 texUV00;\n"
"    float2 texUV11;\n"
"    float2 uvFrac;\n"
" } ClutBlitInterpolateFragInput;\n"
"\n"
"\n"
"//____ plotVertexShader() ____________________________________________\n"
"\n"
"vertex PlotFragInput\n"
"plotVertexShader(uint vertexID [[vertex_id]],\n"
"             constant Vertex *pVertices [[buffer(0)]],\n"
"             constant vector_float4  *pExtras [[buffer(1)]],\n"
"             constant Uniform * pUniform[[buffer(2)]])\n"
"{\n"
"    PlotFragInput out;\n"
"\n"
"    float2 pos = (vector_float2) pVertices[vertexID].coord.xy;\n"
"\n"
"    vector_float2 canvasSize = pUniform->canvasDim;\n"
"    \n"
"    out.position = vector_float4(0.0, 0.0, 0.0, 1.0);\n"
"    out.position.x = pos.x*2 / canvasSize.x - 1.0;\n"
"    out.position.y = (pUniform->canvasYOfs + pUniform->canvasYMul*pos.y)*2 / canvasSize.y - 1.0;\n"
"\n"
"\n"
"    int     eOfs = pVertices[vertexID].extrasOfs;\n"
"    out.color = pUniform->flatTint * pExtras[eOfs];\n"
"\n"
"    out.pointSize = 1.f;\n"
"\n"
"    return out;\n"
"}\n"
"\n"
"//____ plotFragmentShader() ____________________________________________\n"
"\n"
"fragment float4 plotFragmentShader(PlotFragInput in [[stage_in]])\n"
"{\n"
"    // Return the interpolated color.\n"
"    return in.color;\n"
"};\n"
"\n"
"\n"
"//____ lineFromToVertexShader() ____________________________________________\n"
"\n"
"vertex LineFromToFragInput\n"
"lineFromToVertexShader(uint vertexID [[vertex_id]],\n"
"             constant Vertex *pVertices [[buffer(0)]],\n"
"             constant vector_float4  *pExtras [[buffer(1)]],\n"
"             constant Uniform * pUniform[[buffer(2)]])\n"
"{\n"
"    LineFromToFragInput out;\n"
"\n"
"    float2 pos = (vector_float2) pVertices[vertexID].coord.xy;\n"
"\n"
"    vector_float2 canvasSize = pUniform->canvasDim;\n"
"    \n"
"    out.position = vector_float4(0.0, 0.0, 0.0, 1.0);\n"
"    out.position.x = pos.x*2 / canvasSize.x - 1.0;\n"
"    out.position.y = (pUniform->canvasYOfs + pUniform->canvasYMul*pos.y)*2 / canvasSize.y - 1.0;\n"
"\n"
"\n"
"    int     eOfs = pVertices[vertexID].extrasOfs;\n"
"    out.color = pUniform->flatTint * pExtras[eOfs];\n"
"\n"
"    float4 x = pExtras[eOfs+1];\n"
"    out.s = x.x;\n"
"    out.w = x.y;\n"
"    out.slope = x.z;\n"
"    out.ifSteep = x.w;\n"
"    out.ifMild = 1.0 - out.ifSteep;\n"
"\n"
"    return out;\n"
"}\n"
"\n"
"//____ lineFromToFragmentShader() ____________________________________________\n"
"\n"
"fragment float4 lineFromToFragmentShader(LineFromToFragInput in [[stage_in]])\n"
"{\n"
"   float4 outColor;\n"
"\n"
"   outColor.rgb = in.color.rgb;\n"
"   outColor.a = in.color.a * clamp(in.w - abs(in.position.x*in.ifSteep + in.position.y*in.ifMild - in.s - (in.position.x*in.ifMild + in.position.y*in.ifSteep) * in.slope), 0.0, 1.0);\n"
"\n"
"   return outColor;\n"
"};\n"
"\n"
"//____ fillVertexShader() ____________________________________________\n"
"\n"
"vertex FillFragInput\n"
"fillVertexShader(uint vertexID [[vertex_id]],\n"
"             constant Vertex *pVertices [[buffer(0)]],\n"
"             constant vector_float4  *pExtras [[buffer(1)]],\n"
"             constant Uniform * pUniform[[buffer(2)]])\n"
"{\n"
"    FillFragInput out;\n"
"\n"
"    float2 pos = (vector_float2) pVertices[vertexID].coord.xy;\n"
"\n"
"    vector_float2 canvasSize = pUniform->canvasDim;\n"
"    \n"
"    out.position = vector_float4(0.0, 0.0, 0.0, 1.0);\n"
"    out.position.x = pos.x*2 / canvasSize.x - 1.0;\n"
"    out.position.y = (pUniform->canvasYOfs + pUniform->canvasYMul*pos.y)*2 / canvasSize.y - 1.0;\n"
"\n"
"\n"
"    int     eOfs = pVertices[vertexID].extrasOfs;\n"
"    out.color = pUniform->flatTint * pExtras[eOfs];\n"
"\n"
"    return out;\n"
"}\n"
"\n"
"//____ fillGradientVertexShader() ____________________________________________\n"
"\n"
"vertex FillFragInput\n"
"fillGradientVertexShader(uint vertexID [[vertex_id]],\n"
"             constant Vertex *pVertices [[buffer(0)]],\n"
"             constant vector_float4  *pExtras [[buffer(1)]],\n"
"             constant Uniform * pUniform[[buffer(2)]])\n"
"{\n"
"    FillFragInput out;\n"
"\n"
"    float2 pos = (vector_float2) pVertices[vertexID].coord.xy;\n"
"\n"
"    vector_float2 canvasSize = pUniform->canvasDim;\n"
"    \n"
"    out.position = vector_float4(0.0, 0.0, 0.0, 1.0);\n"
"    out.position.x = pos.x*2 / canvasSize.x - 1.0;\n"
"    out.position.y = (pUniform->canvasYOfs + pUniform->canvasYMul*pos.y)*2 / canvasSize.y - 1.0;\n"
"\n"
"    float2   tintOfs = (pos - float2(pUniform->tintRectPos)) / float2(pUniform->tintRectSize);\n"
"    float4   lineStartTint = pUniform->topLeftTint + (pUniform->bottomLeftTint - pUniform->topLeftTint) * tintOfs.y;\n"
"    float4   lineEndTint = pUniform->topRightTint + (pUniform->bottomRightTint - pUniform->topRightTint) * tintOfs.y;\n"
"    float4   gradientTint = lineStartTint + (lineEndTint - lineStartTint) * tintOfs.x;\n"
"\n"
"    int     eOfs = pVertices[vertexID].extrasOfs;\n"
"    out.color = pUniform->flatTint * gradientTint * pExtras[eOfs];\n"
"\n"
"    return out;\n"
"}\n"
"\n"
"//____ fillFragmentShader() ____________________________________________\n"
"\n"
"fragment float4 fillFragmentShader(FillFragInput in [[stage_in]])\n"
"{\n"
"    // Return the interpolated color.\n"
"    return in.color;\n"
"};\n"
"\n"
"//____ fillAAVertexShader() ____________________________________________\n"
"\n"
"vertex FillAAFragInput\n"
"fillAAVertexShader(uint vertexID [[vertex_id]],\n"
"             constant Vertex *pVertices [[buffer(0)]],\n"
"             constant vector_float4  *pExtras [[buffer(1)]],\n"
"             constant Uniform * pUniform[[buffer(2)]])\n"
"{\n"
"    FillAAFragInput out;\n"
"\n"
"    float2 pos = (vector_float2) pVertices[vertexID].coord.xy;\n"
"\n"
"    vector_float2 canvasSize = pUniform->canvasDim;\n"
"    \n"
"    out.position = vector_float4(0.0, 0.0, 0.0, 1.0);\n"
"    out.position.x = pos.x*2 / canvasSize.x - 1.0;\n"
"    out.position.y = (pUniform->canvasYOfs + pUniform->canvasYMul*pos.y)*2 / canvasSize.y - 1.0;\n"
"\n"
"\n"
"    int     eOfs = pVertices[vertexID].extrasOfs;\n"
"    out.color = pUniform->flatTint * pExtras[eOfs];\n"
"\n"
"    out.rect = pExtras[eOfs+1];\n"
"//    out.rect.y = pUniform->canvasYOfs + pUniform->canvasYMul*out.rect.y;\n"
"    out.rect.zw += float2(0.5f,0.5f);\n"
"\n"
"    return out;\n"
"}\n"
"\n"
"\n"
"//____ fillGradientAAVertexShader() ____________________________________________\n"
"\n"
"vertex FillAAFragInput\n"
"fillGradientAAVertexShader(uint vertexID [[vertex_id]],\n"
"             constant Vertex *pVertices [[buffer(0)]],\n"
"             constant vector_float4  *pExtras [[buffer(1)]],\n"
"             constant Uniform * pUniform[[buffer(2)]])\n"
"{\n"
"    FillAAFragInput out;\n"
"\n"
"    float2 pos = (vector_float2) pVertices[vertexID].coord.xy;\n"
"\n"
"    vector_float2 canvasSize = pUniform->canvasDim;\n"
"    \n"
"    out.position = vector_float4(0.0, 0.0, 0.0, 1.0);\n"
"    out.position.x = pos.x*2 / canvasSize.x - 1.0;\n"
"    out.position.y = (pUniform->canvasYOfs + pUniform->canvasYMul*pos.y)*2 / canvasSize.y - 1.0;\n"
"\n"
"    float2   tintOfs = (pos - float2(pUniform->tintRectPos)) / float2(pUniform->tintRectSize);\n"
"    float4   lineStartTint = pUniform->topLeftTint + (pUniform->bottomLeftTint - pUniform->topLeftTint) * tintOfs.y;\n"
"    float4   lineEndTint = pUniform->topRightTint + (pUniform->bottomRightTint - pUniform->topRightTint) * tintOfs.y;\n"
"    float4   gradientTint = lineStartTint + (lineEndTint - lineStartTint) * tintOfs.x;\n"
"\n"
"    int     eOfs = pVertices[vertexID].extrasOfs;\n"
"    out.color = pUniform->flatTint * gradientTint * pExtras[eOfs];\n"
"\n"
"    out.rect = pExtras[eOfs+1];\n"
"//    out.rect.y = pUniform->canvasYOfs + pUniform->canvasYMul*out.rect.y;\n"
"    out.rect.zw += float2(0.5f,0.5f);\n"
"\n"
"    return out;\n"
"}\n"
"\n"
"//____ fillAAFragmentShader() ____________________________________________\n"
"\n"
"fragment float4 fillAAFragmentShader(FillAAFragInput in [[stage_in]])\n"
"{\n"
"    float4 color = in.color;\n"
"    float2 middleofs = abs(in.position.xy - in.rect.xy);\n"
"    float2 alphas = clamp(in.rect.zw  - middleofs, 0.f, 1.f);\n"
"    color.a = in.color.a * alphas.x * alphas.y;\n"
"\n"
"    return color;\n"
"};\n"
"\n"
"//____ blitVertexShader() _______________________________________________\n"
"\n"
"vertex BlitFragInput\n"
"blitVertexShader(uint vertexID [[vertex_id]],\n"
"             constant Vertex *pVertices [[buffer(0)]],\n"
"             constant vector_float4  *pExtras [[buffer(1)]],\n"
"             constant Uniform * pUniform[[buffer(2)]])\n"
"{\n"
"    BlitFragInput out;\n"
"\n"
"    float2 pos = (vector_float2) pVertices[vertexID].coord.xy;\n"
"\n"
"    vector_float2 canvasSize = pUniform->canvasDim;\n"
"    \n"
"    out.position = vector_float4(0.0, 0.0, 0.0, 1.0);\n"
"    out.position.x = pos.x*2 / canvasSize.x - 1.0;\n"
"    out.position.y = (pUniform->canvasYOfs + pUniform->canvasYMul*pos.y)*2 / canvasSize.y - 1.0;\n"
"\n"
"\n"
"    int     eOfs = pVertices[vertexID].extrasOfs;\n"
"\n"
"    vector_float4 srcDst = pExtras[eOfs];\n"
"    vector_float4 transform = pExtras[eOfs+1];\n"
"    vector_float2 src = srcDst.xy;\n"
"    vector_float2 dst = srcDst.zw;\n"
"\n"
"    out.texUV.x = (src.x + 0.0001f + (pos.x - dst.x) * transform.x + (pos.y - dst.y) * transform.z) / pUniform->texSize.x;      //TODO: Replace this ugly +0.02f fix with whatever is correct.\n"
"    out.texUV.y = (src.y + 0.0001f + (pos.x - dst.x) * transform.y + (pos.y - dst.y) * transform.w) / pUniform->texSize.y;      //TODO: Replace this ugly +0.02f fix with whatever is correct.\n"
"\n"
"    out.color = pUniform->flatTint;\n"
"\n"
"    return out;\n"
"}\n"
"\n"
"//____ blitGradientVertexShader() _______________________________________________\n"
"\n"
"\n"
"vertex BlitFragInput\n"
"blitGradientVertexShader(uint vertexID [[vertex_id]],\n"
"             constant Vertex *pVertices [[buffer(0)]],\n"
"             constant vector_float4  *pExtras [[buffer(1)]],\n"
"             constant Uniform * pUniform[[buffer(2)]])\n"
"{\n"
"    BlitFragInput out;\n"
"\n"
"    float2 pos = (vector_float2) pVertices[vertexID].coord.xy;\n"
"\n"
"    vector_float2 canvasSize = pUniform->canvasDim;\n"
"    \n"
"    out.position = vector_float4(0.0, 0.0, 0.0, 1.0);\n"
"    out.position.x = pos.x*2 / canvasSize.x - 1.0;\n"
"    out.position.y = (pUniform->canvasYOfs + pUniform->canvasYMul*pos.y)*2 / canvasSize.y - 1.0;\n"
"\n"
"\n"
"    int     eOfs = pVertices[vertexID].extrasOfs;\n"
"\n"
"    vector_float4 srcDst = pExtras[eOfs];\n"
"    vector_float4 transform = pExtras[eOfs+1];\n"
"    vector_float2 src = srcDst.xy;\n"
"    vector_float2 dst = srcDst.zw;\n"
"\n"
"    out.texUV.x = (src.x + 0.0001f + (pos.x - dst.x) * transform.x + (pos.y - dst.y) * transform.z) / pUniform->texSize.x;      //TODO: Replace this ugly +0.02f fix with whatever is correct.\n"
"    out.texUV.y = (src.y + 0.0001f + (pos.x - dst.x) * transform.y + (pos.y - dst.y) * transform.w) / pUniform->texSize.y;      //TODO: Replace this ugly +0.02f fix with whatever is correct.\n"
"\n"
"    float2   tintOfs = (pos - float2(pUniform->tintRectPos)) / float2(pUniform->tintRectSize);\n"
"    float4   lineStartTint = pUniform->topLeftTint + (pUniform->bottomLeftTint - pUniform->topLeftTint) * tintOfs.y;\n"
"    float4   lineEndTint = pUniform->topRightTint + (pUniform->bottomRightTint - pUniform->topRightTint) * tintOfs.y;\n"
"    float4   gradientTint = lineStartTint + (lineEndTint - lineStartTint) * tintOfs.x;\n"
"\n"
"    out.color = pUniform->flatTint * gradientTint;\n"
"\n"
"    return out;\n"
"}\n"
"\n"
"//____ blitFragmentShader() ____________________________________________\n"
"\n"
"fragment float4 blitFragmentShader(BlitFragInput in [[stage_in]],\n"
"                                    texture2d<half> colorTexture [[ texture(0) ]])\n"
"{\n"
"    constexpr sampler textureSampler (mag_filter::linear,\n"
"                                      min_filter::linear);\n"
"\n"
"    const half4 colorSample = colorTexture.sample(textureSampler, in.texUV);\n"
"\n"
"    return float4(colorSample) * in.color;\n"
"};\n"
"\n"
"//____ clutBlitNearestFragmentShader() ____________________________________________\n"
"\n"
"fragment float4 clutBlitNearestFragmentShader(BlitFragInput in [[stage_in]],\n"
"                                    texture2d<float> colorTexture [[ texture(0) ]],\n"
"                                    texture2d<half> clutTexture [[ texture(1) ]])\n"
"{\n"
"    constexpr sampler textureSampler (mag_filter::nearest,\n"
"                                      min_filter::nearest);\n"
"\n"
"    const float colorIndex = colorTexture.sample(textureSampler, in.texUV).r;\n"
"    const half4 colorSample = clutTexture.sample(textureSampler, {colorIndex,0.5f} );\n"
"\n"
"//    return in.color;\n"
"    return float4(colorSample) * in.color;\n"
"};\n"
"\n"
"//____ clutBlitInterpolateVertexShader() _______________________________________________\n"
"\n"
"vertex ClutBlitInterpolateFragInput\n"
"clutBlitInterpolateVertexShader(uint vertexID [[vertex_id]],\n"
"             constant Vertex *pVertices [[buffer(0)]],\n"
"             constant vector_float4  *pExtras [[buffer(1)]],\n"
"             constant Uniform * pUniform[[buffer(2)]])\n"
"{\n"
"    ClutBlitInterpolateFragInput out;\n"
"\n"
"    float2 pos = (vector_float2) pVertices[vertexID].coord.xy;\n"
"\n"
"    vector_float2 canvasSize = pUniform->canvasDim;\n"
"    \n"
"    out.position = vector_float4(0.0, 0.0, 0.0, 1.0);\n"
"    out.position.x = pos.x*2 / canvasSize.x - 1.0;\n"
"    out.position.y = (pUniform->canvasYOfs + pUniform->canvasYMul*pos.y)*2 / canvasSize.y - 1.0;\n"
"\n"
"\n"
"    int     eOfs = pVertices[vertexID].extrasOfs;\n"
"\n"
"    vector_float4 srcDst = pExtras[eOfs];\n"
"    vector_float4 transform = pExtras[eOfs+1];\n"
"    vector_float2 src = srcDst.xy;\n"
"    vector_float2 dst = srcDst.zw;\n"
"\n"
"    float2 texUV = src + (pos-dst) * transform.xw + (pos.yx - dst.yx) * transform.zy;\n"
"    texUV -= 0.5f;\n"
"\n"
"    out.uvFrac = texUV;\n"
"    out.texUV00 = texUV/ (float2) pUniform->texSize;\n"
"    out.texUV11 = (texUV+1)/ (float2) pUniform->texSize;\n"
"\n"
"    out.color = pUniform->flatTint;\n"
"\n"
"    return out;\n"
"}\n"
"\n"
"//____ clutBlitInterpolateGradientVertexShader() _______________________________________________\n"
"\n"
"vertex ClutBlitInterpolateFragInput\n"
"clutBlitInterpolateGradientVertexShader(uint vertexID [[vertex_id]],\n"
"             constant Vertex *pVertices [[buffer(0)]],\n"
"             constant vector_float4  *pExtras [[buffer(1)]],\n"
"             constant Uniform * pUniform[[buffer(2)]])\n"
"{\n"
"    ClutBlitInterpolateFragInput out;\n"
"\n"
"    float2 pos = (vector_float2) pVertices[vertexID].coord.xy;\n"
"\n"
"    vector_float2 canvasSize = pUniform->canvasDim;\n"
"    \n"
"    out.position = vector_float4(0.0, 0.0, 0.0, 1.0);\n"
"    out.position.x = pos.x*2 / canvasSize.x - 1.0;\n"
"    out.position.y = (pUniform->canvasYOfs + pUniform->canvasYMul*pos.y)*2 / canvasSize.y - 1.0;\n"
"\n"
"\n"
"    int     eOfs = pVertices[vertexID].extrasOfs;\n"
"\n"
"    vector_float4 srcDst = pExtras[eOfs];\n"
"    vector_float4 transform = pExtras[eOfs+1];\n"
"    vector_float2 src = srcDst.xy;\n"
"    vector_float2 dst = srcDst.zw;\n"
"\n"
"    float2 texUV = src + (pos-dst) * transform.xw + (pos.yx - dst.yx) * transform.zy;\n"
"    texUV -= 0.5f;\n"
"\n"
"    out.uvFrac = texUV;\n"
"    out.texUV00 = texUV/ (float2) pUniform->texSize;\n"
"    out.texUV11 = (texUV+1)/ (float2) pUniform->texSize;\n"
"\n"
"    float2   tintOfs = (pos - float2(pUniform->tintRectPos)) / float2(pUniform->tintRectSize);\n"
"    float4   lineStartTint = pUniform->topLeftTint + (pUniform->bottomLeftTint - pUniform->topLeftTint) * tintOfs.y;\n"
"    float4   lineEndTint = pUniform->topRightTint + (pUniform->bottomRightTint - pUniform->topRightTint) * tintOfs.y;\n"
"    float4   gradientTint = lineStartTint + (lineEndTint - lineStartTint) * tintOfs.x;\n"
"\n"
"    out.color = pUniform->flatTint * gradientTint;\n"
"\n"
"    return out;\n"
"}\n"
"\n"
"//____ clutBlitInterpolateFragmentShader() ____________________________________________\n"
"\n"
"fragment float4 clutBlitInterpolateFragmentShader(ClutBlitInterpolateFragInput in [[stage_in]],\n"
"                                    texture2d<float> colorTexture [[ texture(0) ]],\n"
"                                    texture2d<half> clutTexture [[ texture(1) ]])\n"
"{\n"
"    constexpr sampler textureSampler (mag_filter::nearest,\n"
"                                      min_filter::nearest);\n"
"\n"
"   float index00 = colorTexture.sample(textureSampler, in.texUV00).r;\n"
"   float index01 = colorTexture.sample(textureSampler, float2(in.texUV11.x,in.texUV00.y) ).r;\n"
"   float index10 = colorTexture.sample(textureSampler, float2(in.texUV00.x,in.texUV11.y) ).r;\n"
"   float index11 = colorTexture.sample(textureSampler, in.texUV11).r;\n"
"   half4 color00 = clutTexture.sample(textureSampler, float2(index00,0.5f));\n"
"   half4 color01 = clutTexture.sample(textureSampler, float2(index01,0.5f));\n"
"   half4 color10 = clutTexture.sample(textureSampler, float2(index10,0.5f));\n"
"   half4 color11 = clutTexture.sample(textureSampler, float2(index11,0.5f));\n"
"\n"
"   half4 out0 = color00 * (1-fract(in.uvFrac.x)) + color01 * fract(in.uvFrac.x);\n"
"   half4 out1 = color10 * (1-fract(in.uvFrac.x)) + color11 * fract(in.uvFrac.x);\n"
"   half4 colorSample = (out0 * (1-fract(in.uvFrac.y)) + out1 * fract(in.uvFrac.y));\n"
"\n"
"    return float4(colorSample) * in.color;\n"
"};\n"
;}
