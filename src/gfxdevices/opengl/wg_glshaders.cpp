/*=========================================================================

						 >>> WonderGUI <<<

  This file is part of Tord Jansson's WonderGUI Graphics Toolkit
  and copyright (c) Tord Jansson, Sweden [tord.jansson@gmail.com].

							-----------

  The WonderGUI Graphics Toolkit is free software; you can redistribute
  this file and/or modify it under the terms of the GNU General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

							-----------

  The WonderGUI Graphics Toolkit is also available for use in commercial
  closed-source projects under a separate license. Interested parties
  should contact Tord Jansson [tord.jansson@gmail.com] for details.

=========================================================================*/
#ifndef WG_GLSHADERS_DOT_H
#define WG_GLSHADERS_DOT_H

#include <wg_glgfxdevice.h>

namespace wg {




const char GlGfxDevice::fillVertexShader[] =

"#version 330 core\n"
"layout(std140) uniform Canvas"
"{"
"	vec2 dimensions;"
"	int yOfs;"
"	int yMul;"
"};"

"layout(location = 0) in ivec2 pos;                        "
"layout(location = 1) in vec4 color;                       "
"out vec4 fragColor;                                       "
"void main()                                               "
"{                                                         "
"   gl_Position.x = pos.x*2/dimensions.x - 1.0;            "
"   gl_Position.y = (yOfs + yMul*pos.y)*2/dimensions.y - 1.0;    "
"   gl_Position.z = 0.0;                                   "
"   gl_Position.w = 1.0;                                   "
"   fragColor = color;						"
"}                                                         ";


const char GlGfxDevice::fillFragmentShader[] =

"#version 330 core\n"
"out vec4 outColor;                     "
"in vec4 fragColor;                         "
"void main()                            "
"{                                      "
"   outColor = fragColor;                   "
"}                                      ";

const char GlGfxDevice::blitVertexShader[] =

"#version 330 core\n"

"layout(std140) uniform Canvas"
"{"
"	vec2 dimensions;"
"	int yOfs;"
"	int yMul;"
"};"

"uniform ivec2 texSize;									   "
"uniform samplerBuffer extrasId;						   "
"layout(location = 0) in ivec2 pos;                        "
"layout(location = 1) in vec4 color;                       "
"layout(location = 2) in int extrasOfs;                    "
"out vec2 texUV;                                           "
"out vec4 fragColor;                                       "
"void main()                                               "
"{                                                         "
"   gl_Position.x = pos.x*2/dimensions.x - 1.0;            "
"   gl_Position.y = (yOfs + yMul*pos.y)*2/dimensions.y - 1.0;            "
"   gl_Position.z = 0.0;                                   "
"   gl_Position.w = 1.0;                                   "
"   vec4 srcDst = texelFetch(extrasId, extrasOfs);		   "
"   vec4 transform = texelFetch(extrasId, extrasOfs+1);	   "
"   vec2 src = srcDst.xy;                                  "
"   vec2 dst = srcDst.zw;                                  "
"   texUV.x = (src.x + (pos.x - dst.x) * transform.x + (pos.y - dst.y) * transform.z) / texSize.x; "
"   texUV.y = (src.y + (pos.x - dst.x) * transform.y + (pos.y - dst.y) * transform.w) / texSize.y; "
"   fragColor = color;									   "
"}                                                         ";

const char GlGfxDevice::blitFragmentShader[] =

"#version 330 core\n"

"uniform sampler2D texId;						"
"in vec2 texUV;									"
"in vec4 fragColor;								"
"out vec4 color;								"
"void main()									"
"{												"
"   color = texture(texId, texUV) * fragColor;  "
"}												";

const char GlGfxDevice::alphaBlitFragmentShader[] =

"#version 330 core\n"

"uniform sampler2D texId;						"
"in vec2 texUV;									"
"in vec4 fragColor;								"
"out vec4 color;								"
"void main()									"
"{												"
"   color = fragColor;							"
"   color.a *= texture(texId, texUV).r;         "
"}												";


const char GlGfxDevice::clutBlitNearestVertexShader[] =

"#version 330 core\n"

"layout(std140) uniform Canvas"
"{"
"	vec2 dimensions;"
"	int yOfs;"
"	int yMul;"
"};"

"uniform ivec2 texSize;									   "
"uniform samplerBuffer extrasId;						   "
"layout(location = 0) in ivec2 pos;                        "
"layout(location = 1) in vec4 color;                       "
"layout(location = 2) in int extrasOfs;                    "
"out vec2 texUV;                                           "
"out vec4 fragColor;                                       "
"void main()                                               "
"{                                                         "
"   gl_Position.x = pos.x*2/dimensions.x - 1.0;            "
"   gl_Position.y = (yOfs + yMul*pos.y)*2/dimensions.y - 1.0;            "
"   gl_Position.z = 0.0;                                   "
"   gl_Position.w = 1.0;                                   "
"   vec4 srcDst = texelFetch(extrasId, extrasOfs);		   "
"   vec4 transform = texelFetch(extrasId, extrasOfs+1);	   "
"   vec2 src = srcDst.xy;                                  "
"   vec2 dst = srcDst.zw;                                  "
"   texUV.x = (src.x + (pos.x - dst.x) * transform.x + (pos.y - dst.y) * transform.z) / texSize.x; "
"   texUV.y = (src.y + (pos.x - dst.x) * transform.y + (pos.y - dst.y) * transform.w) / texSize.y; "
"   fragColor = color;									   "
"}                                                         ";

const char GlGfxDevice::clutBlitNearestFragmentShader[] =

"#version 330 core\n"

"uniform sampler2D texId;						"
"uniform samplerBuffer clutId;					"
"in vec2 texUV;									"
"in vec4 fragColor;								"
"out vec4 color;								"
"void main()									"
"{												"
"   int index = int(texture(texId, texUV).r*256);		"
"   color = texelFetch(clutId, index) * fragColor;	"
"}												";

const char GlGfxDevice::clutBlitInterpolateVertexShader[] =

"#version 330 core\n"

"layout(std140) uniform Canvas"
"{"
"	vec2 dimensions;"
"	int yOfs;"
"	int yMul;"
"};"

"uniform ivec2 texSize;									   "
"uniform samplerBuffer extrasId;						   "
"layout(location = 0) in ivec2 pos;                        "
"layout(location = 1) in vec4 color;                       "
"layout(location = 2) in int extrasOfs;                    "
"out vec2 texUV00;                                         "
"out vec2 texUV11;                                         "
"out vec2 uvFrac;                                         "
"out vec4 fragColor;                                       "
"void main()                                               "
"{                                                         "
"   gl_Position.x = pos.x*2/dimensions.x - 1.0;            "
"   gl_Position.y = (yOfs + yMul*pos.y)*2/dimensions.y - 1.0;            "
"   gl_Position.z = 0.0;                                   "
"   gl_Position.w = 1.0;                                   "
"   vec4 srcDst = texelFetch(extrasId, extrasOfs);		   "
"   vec4 transform = texelFetch(extrasId, extrasOfs+1);	   "
"   vec2 src = srcDst.xy;                                  "
"   vec2 dst = srcDst.zw;                                  "
//"   float texU = src.x + (pos.x - dst.x) * transform.x + (pos.y - dst.y) * transform.z; "
//"   float texV = src.y + (pos.x - dst.x) * transform.y + (pos.y - dst.y) * transform.w; "

//"   float texU = src.x + (pos.x - dst.x) * transform.x + (pos.y - dst.y) * transform.z; "
//"   float texV = src.y + (pos.y - dst.y) * transform.w + (pos.x - dst.x) * transform.y; "

"   vec2 texUV = src + (pos-dst) * transform.xw + (pos.yx - dst.yx) * transform.zy;"
"   texUV -= 0.5f;"

"   uvFrac = texUV;"
"   texUV00 = texUV/texSize;				"
"   texUV11 = (texUV+1)/texSize;			"
"   fragColor = color;									   "
"}                                                         ";

const char GlGfxDevice::clutBlitInterpolateFragmentShader[] =

"#version 330 core\n"

"uniform sampler2D texId;						"
"uniform samplerBuffer clutId;					"
"in vec2 texUV00;								"
"in vec2 texUV11;								"
"in vec2 uvFrac;								"
"in vec4 fragColor;								"
"out vec4 color;								"
"void main()									"
"{												"
"   int index00 = int(texture(texId, texUV00).r*256);		"
"   int index01 = int(texture(texId, vec2(texUV11.x,texUV00.y) ).r*256);		"
"   int index10 = int(texture(texId, vec2(texUV00.x,texUV11.y) ).r*256);		"
"   int index11 = int(texture(texId, texUV11).r*256);		"
"   vec4 color00 = texelFetch(clutId, index00);	"
"   vec4 color01 = texelFetch(clutId, index01);	"
"   vec4 color10 = texelFetch(clutId, index10);	"
"   vec4 color11 = texelFetch(clutId, index11);	"

"   vec4 out0 = color00 * (1-fract(uvFrac.x)) + color01 * fract(uvFrac.x);	"
"   vec4 out1 = color10 * (1-fract(uvFrac.x)) + color11 * fract(uvFrac.x);	"
"   color = (out0 * (1-fract(uvFrac.y)) + out1 * fract(uvFrac.y)) * fragColor;	"

"}												";


const char GlGfxDevice::plotVertexShader[] =

"#version 330 core\n"

"layout(std140) uniform Canvas"
"{"
"	vec2 dimensions;"
"	int yOfs;"
"	int yMul;"
"};"

"layout(location = 0) in ivec2 pos;                     "
"layout(location = 1) in vec4 color;                       "
"out vec4 fragColor;										"
"void main()                                            "
"{                                                      "
"   gl_Position.x = (pos.x+0.5)*2.0/dimensions.x - 1.0; "
"   gl_Position.y = ((yOfs + yMul*pos.y)+0.5)*2.0/dimensions.y - 1,0;	"
"   gl_Position.z = 0.0;                                "
"   gl_Position.w = 1.0;                                "
"   fragColor = color;									"
"}                                                      ";


const char GlGfxDevice::plotFragmentShader[] =

"#version 330 core\n"
"in vec4 fragColor;                     "
"out vec4 outColor;                     "
"void main()                            "
"{                                      "
"   outColor = fragColor;				"
"}                                      ";



const char GlGfxDevice::lineFromToVertexShader[] =

"#version 330 core\n"

"layout(std140) uniform Canvas"
"{"
"	vec2 dimensions;"
"	int yOfs;"
"	int yMul;"
"};"

"uniform samplerBuffer extrasId;								"
"layout(location = 0) in ivec2 pos;                         "
"layout(location = 1) in vec4 color;                        "
"layout(location = 2) in int extrasOfs;                       "
"out vec4 fragColor;                                        "
"flat out float s;												"
"flat out float w;												"
"flat out float slope;											"
"flat out float ifSteep;											"
"flat out float ifMild;											"
"void main()                                                "
"{                                                          "
"   gl_Position.x = pos.x*2/dimensions.x - 1.0;             "
"   gl_Position.y = (yOfs + yMul*pos.y)*2/dimensions.y - 1.0;             "
"   gl_Position.z = 0.0;                                    "
"   gl_Position.w = 1.0;                                    "
"   fragColor = color;										"
"   int ofs = extrasOfs;									"
"   vec4 x = texelFetch(extrasId, ofs);						"
"   s = x.x;												"
"   w = x.y;												"
"   slope = yMul*x.z;										"
"   ifSteep = x.w;											"
"   ifMild = 1.0 - ifSteep;									"
"}                                                          ";


const char GlGfxDevice::lineFromToFragmentShader[] =

"#version 330 core\n"
"in vec4 fragColor;                     "
"flat in float s;							"
"flat in float w;							"
"flat in float slope;						"
"flat in float ifSteep;						"
"flat in float ifMild;						"
"out vec4 outColor;                     "
"void main()                            "
"{										"
"   outColor.rgb = fragColor.rgb;		"
"   outColor.a = fragColor.a * clamp(w - abs(gl_FragCoord.x*ifSteep + gl_FragCoord.y*ifMild - s - (gl_FragCoord.x*ifMild + gl_FragCoord.y*ifSteep) * slope), 0.0, 1.0); "
"}                                      ";

const char GlGfxDevice::aaFillVertexShader[] =

"#version 330 core\n"

"layout(std140) uniform Canvas"
"{"
"	vec2 dimensions;"
"	int yOfs;"
"	int yMul;"
"};"

"uniform samplerBuffer extrasId;								"
"layout(location = 0) in ivec2 pos;                         "
"layout(location = 1) in vec4 color;                        "
"layout(location = 2) in int extrasOfs;                       "
"out vec4 fragColor;                                        "
"flat out vec4 rect;										"
"void main()                                                "
"{                                                          "
"   gl_Position.x = pos.x*2/dimensions.x - 1.0;             "
"   gl_Position.y = (yOfs + yMul*pos.y)*2/dimensions.y - 1.0;             "
"   gl_Position.z = 0.0;                                    "
"   gl_Position.w = 1.0;                                    "
"   fragColor = color;										"
"   rect = texelFetch(extrasId, extrasOfs);					"
"   rect.y = yOfs + yMul*rect.y;							"
"   rect.zw += vec2(0.5f,0.5f);								"		// Adding offset here so we don't have to do it in pixel shader.
"}                                                          ";


const char GlGfxDevice::aaFillFragmentShader[] =

"#version 330 core\n"
"in vec4 fragColor;						"
"flat in vec4 rect;						"
"out vec4 outColor;                     "
"void main()                            "
"{										"
"   outColor.rgb = fragColor.rgb;             "
"	vec2 middleofs = abs(gl_FragCoord.xy - rect.xy);   "
"	vec2 alphas = clamp(rect.zw  - middleofs, 0.f, 1.f);  "
"	outColor.a = fragColor.a * alphas.x * alphas.y;  "
"}                                      ";

static const char segmentsVertexShader1[] =

"#version 330 core\n"

"layout(std140) uniform Canvas"
"{"
"	vec2 dimensions;"
"	int yOfs;"
"	int yMul;"
"};"

"uniform samplerBuffer extrasId;						"
"uniform samplerBuffer colorsId;					"
"layout(location = 0) in ivec2 pos;                     "
"layout(location = 1) in vec4 color;					"
"layout(location = 2) in int extrasOfs;					"
"layout(location = 3) in vec2 uv;						"
"out vec4 fragColor;									"
"out vec2 texUV;										"
"flat out int segments;									"
"flat out int stripesOfs;								"
"flat out vec4 col1; "
"flat out vec4 col2; "

"void main()											"
"{                                                      "
"   gl_Position.x = pos.x*2/dimensions.x - 1.0;         "
"   gl_Position.y = (yOfs + yMul*pos.y)*2/dimensions.y - 1.0;            "
"   gl_Position.z = 0.0;                                "
"   gl_Position.w = 1.0;                                "
"   fragColor = color;									"
"   vec4 extras = texelFetch(extrasId, extrasOfs);		"
"   segments = int(extras.x);							"
"   stripesOfs = int(extras.y);							"
"	int colorsOfs = extrasOfs+1;						"
"   texUV = uv;											"

"	col1 = texelFetch(colorsId, colorsOfs ); "
"	col2 = texelFetch(colorsId, colorsOfs+1 ); "

"}                                                      ";


static const char segmentsFragmentShader1[] =

"#version 330 core\n"
"uniform samplerBuffer stripesId;				"
"in vec2 texUV;									"
"in vec4 fragColor;								"
"flat in int segments;							"
"flat in int stripesOfs;						"
"flat in vec4 col1; "
"flat in vec4 col2; "

"out vec4 color;								"
"void main()									"
"{												"
"	vec4 edge1 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1) ); "

"	float factor1 = 1.f; "

"	float x1 = (texUV.y - edge1.r) * edge1.g;"
"	float adder1 = edge1.g / 2.f;"
"	if (x1 < 0.f)"
"		adder1 = edge1.b;"
"	else if (x1 + edge1.g > 1.f)"
"		adder1 = edge1.a;"
"	float factor2 = clamp(x1 + adder1, 0.f, 1.f);"


"   factor1 = (factor1 -factor2)*col1.a;"
"   factor2 = (factor2)*col2.a;"

"   float totalAlpha = factor1 + factor2;"


"   color.a = totalAlpha; "
"   color.rgb = (col1.rgb * factor1 + col2.rgb * factor2)/totalAlpha;"
"   color *= fragColor;"
"}												";


static const char segmentsVertexShader2[] =

"#version 330 core\n"
"layout(std140) uniform Canvas"
"{"
"	vec2 dimensions;"
"	int yOfs;"
"	int yMul;"
"};"
"uniform samplerBuffer extrasId;						"
"uniform samplerBuffer colorsId;					"
"layout(location = 0) in ivec2 pos;                     "
"layout(location = 1) in vec4 color;					"
"layout(location = 2) in int extrasOfs;					"
"layout(location = 3) in vec2 uv;						"
"out vec4 fragColor;									"
"out vec2 texUV;										"
"flat out int segments;									"
"flat out int stripesOfs;								"
"flat out vec4 col1; "
"flat out vec4 col2; "
"flat out vec4 col3; "

"void main()											"
"{                                                      "
"   gl_Position.x = pos.x*2/dimensions.x - 1.0;         "
"   gl_Position.y = (yOfs + yMul*pos.y)*2/dimensions.y - 1.0;            "
"   gl_Position.z = 0.0;                                "
"   gl_Position.w = 1.0;                                "
"   fragColor = color;									"
"   vec4 extras = texelFetch(extrasId, extrasOfs);		"
"   segments = int(extras.x);							"
"   stripesOfs = int(extras.y);							"
"	int colorsOfs = extrasOfs+1;						"
"   texUV = uv;											"

"	col1 = texelFetch(colorsId, colorsOfs ); "
"	col2 = texelFetch(colorsId, colorsOfs+1 ); "
"	col3 = texelFetch(colorsId, colorsOfs+2 ); "

"}                                                      ";


static const char segmentsFragmentShader2[] =

"#version 330 core\n"
"uniform samplerBuffer stripesId;				"
"in vec2 texUV;									"
"in vec4 fragColor;								"
"flat in int segments;							"
"flat in int stripesOfs;						"
"flat in vec4 col1; "
"flat in vec4 col2; "
"flat in vec4 col3; "

"out vec4 color;								"
"void main()									"
"{												"
"	vec4 edge1 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1) ); "
"	vec4 edge2 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+1 ); "

"	float factor1 = 1.f; "

"	float x1 = (texUV.y - edge1.r) * edge1.g;"
"	float adder1 = edge1.g / 2.f;"
"	if (x1 < 0.f)"
"		adder1 = edge1.b;"
"	else if (x1 + edge1.g > 1.f)"
"		adder1 = edge1.a;"
"	float factor2 = clamp(x1 + adder1, 0.f, 1.f);"

"	float x2 = (texUV.y - edge2.r) * edge2.g;"
"	float adder2 = edge2.g / 2.f;"
"	if (x2 < 0.f)"
"		adder2 = edge2.b;"
"	else if (x2 + edge2.g > 1.f)"
"		adder2 = edge2.a;"
"	float factor3 = clamp(x2 + adder2, 0.f, 1.f);"

"   factor1 = (factor1 -factor2)*col1.a;"
"   factor2 = (factor2 -factor3)*col2.a;"
"   factor3 = (factor3)*col3.a;"

"   float totalAlpha = factor1 + factor2 + factor3;"


"   color.a = totalAlpha; "
"   color.rgb = (col1.rgb * factor1 + col2.rgb * factor2 + col3.rgb * factor3)/totalAlpha;"
"   color *= fragColor;"
"}												";

static const char segmentsVertexShader3[] =

"#version 330 core\n"
"layout(std140) uniform Canvas"
"{"
"	vec2 dimensions;"
"	int yOfs;"
"	int yMul;"
"};"
"uniform samplerBuffer extrasId;						"
"uniform samplerBuffer colorsId;					"
"layout(location = 0) in ivec2 pos;                     "
"layout(location = 1) in vec4 color;					"
"layout(location = 2) in int extrasOfs;					"
"layout(location = 3) in vec2 uv;						"
"out vec4 fragColor;									"
"out vec2 texUV;										"
"flat out int segments;									"
"flat out int stripesOfs;								"
"flat out vec4 col1; "
"flat out vec4 col2; "
"flat out vec4 col3; "
"flat out vec4 col4; "

"void main()											"
"{                                                      "
"   gl_Position.x = pos.x*2/dimensions.x - 1.0;         "
"   gl_Position.y = (yOfs + yMul*pos.y)*2/dimensions.y - 1.0;            "
"   gl_Position.z = 0.0;                                "
"   gl_Position.w = 1.0;                                "
"   fragColor = color;									"
"   vec4 extras = texelFetch(extrasId, extrasOfs);		"
"   segments = int(extras.x);							"
"   stripesOfs = int(extras.y);							"
"	int colorsOfs = extrasOfs+1;						"
"   texUV = uv;											"

"	col1 = texelFetch(colorsId, colorsOfs ); "
"	col2 = texelFetch(colorsId, colorsOfs+1 ); "
"	col3 = texelFetch(colorsId, colorsOfs+2 ); "
"	col4 = texelFetch(colorsId, colorsOfs+3 ); "

"}                                                      ";


static const char segmentsFragmentShader3[] =

"#version 330 core\n"
"uniform samplerBuffer stripesId;				"
"in vec2 texUV;									"
"in vec4 fragColor;								"
"flat in int segments;							"
"flat in int stripesOfs;						"
"flat in vec4 col1; "
"flat in vec4 col2; "
"flat in vec4 col3; "
"flat in vec4 col4; "

"out vec4 color;								"
"void main()									"
"{												"
"	vec4 edge1 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1) ); "
"	vec4 edge2 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+1 ); "
"	vec4 edge3 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+2 ); "

"	float factor1 = 1.f; "

"	float x1 = (texUV.y - edge1.r) * edge1.g;"
"	float adder1 = edge1.g / 2.f;"
"	if (x1 < 0.f)"
"		adder1 = edge1.b;"
"	else if (x1 + edge1.g > 1.f)"
"		adder1 = edge1.a;"
"	float factor2 = clamp(x1 + adder1, 0.f, 1.f);"

"	float x2 = (texUV.y - edge2.r) * edge2.g;"
"	float adder2 = edge2.g / 2.f;"
"	if (x2 < 0.f)"
"		adder2 = edge2.b;"
"	else if (x2 + edge2.g > 1.f)"
"		adder2 = edge2.a;"
"	float factor3 = clamp(x2 + adder2, 0.f, 1.f);"

"	float x3 = (texUV.y - edge3.r) * edge3.g;"
"	float adder3 = edge3.g / 2.f;"
"	if (x3 < 0.f)"
"		adder3 = edge3.b;"
"	else if (x3 + edge3.g > 1.f)"
"		adder3 = edge3.a;"
"	float factor4 = clamp(x3 + adder3, 0.f, 1.f);"

"   factor1 = (factor1 -factor2)*col1.a;"
"   factor2 = (factor2 -factor3)*col2.a;"
"   factor3 = (factor3 - factor4)*col3.a;"
"   factor4 = (factor4)*col4.a;"

"   float totalAlpha = factor1 + factor2 + factor3 + factor4;"


"   color.a = totalAlpha; "
"   color.rgb = (col1.rgb * factor1 + col2.rgb * factor2 + col3.rgb * factor3 + col4.rgb * factor4)/totalAlpha;"
"   color *= fragColor;"
"}												";


static const char segmentsVertexShader4[] =

"#version 330 core\n"
"layout(std140) uniform Canvas"
"{"
"	vec2 dimensions;"
"	int yOfs;"
"	int yMul;"
"};"
"uniform samplerBuffer extrasId;						"
"uniform samplerBuffer colorsId;					"
"layout(location = 0) in ivec2 pos;                     "
"layout(location = 1) in vec4 color;					"
"layout(location = 2) in int extrasOfs;					"
"layout(location = 3) in vec2 uv;						"
"out vec4 fragColor;									"
"out vec2 texUV;										"
"flat out int segments;									"
"flat out int stripesOfs;								"
"flat out vec4 col1; "
"flat out vec4 col2; "
"flat out vec4 col3; "
"flat out vec4 col4; "
"flat out vec4 col5; "

"void main()											"
"{                                                      "
"   gl_Position.x = pos.x*2/dimensions.x - 1.0;         "
"   gl_Position.y = (yOfs + yMul*pos.y)*2/dimensions.y - 1.0;            "
"   gl_Position.z = 0.0;                                "
"   gl_Position.w = 1.0;                                "
"   fragColor = color;									"
"   vec4 extras = texelFetch(extrasId, extrasOfs);		"
"   segments = int(extras.x);							"
"   stripesOfs = int(extras.y);							"
"	int colorsOfs = extrasOfs+1;						"
"   texUV = uv;											"

"	col1 = texelFetch(colorsId, colorsOfs ); "
"	col2 = texelFetch(colorsId, colorsOfs+1 ); "
"	col3 = texelFetch(colorsId, colorsOfs+2 ); "
"	col4 = texelFetch(colorsId, colorsOfs+3 ); "
"	col5 = texelFetch(colorsId, colorsOfs+4 ); "

"}                                                      ";


static const char segmentsFragmentShader4[] =

"#version 330 core\n"
"uniform samplerBuffer stripesId;				"
"in vec2 texUV;									"
"in vec4 fragColor;								"
"flat in int segments;							"
"flat in int stripesOfs;						"
"flat in vec4 col1; "
"flat in vec4 col2; "
"flat in vec4 col3; "
"flat in vec4 col4; "
"flat in vec4 col5; "

"out vec4 color;								"
"void main()									"
"{												"
"	vec4 edge1 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1) ); "
"	vec4 edge2 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+1 ); "
"	vec4 edge3 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+2 ); "
"	vec4 edge4 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+3 ); "

"	float factor1 = 1.f; "

"	float x1 = (texUV.y - edge1.r) * edge1.g;"
"	float adder1 = edge1.g / 2.f;"
"	if (x1 < 0.f)"
"		adder1 = edge1.b;"
"	else if (x1 + edge1.g > 1.f)"
"		adder1 = edge1.a;"
"	float factor2 = clamp(x1 + adder1, 0.f, 1.f);"

"	float x2 = (texUV.y - edge2.r) * edge2.g;"
"	float adder2 = edge2.g / 2.f;"
"	if (x2 < 0.f)"
"		adder2 = edge2.b;"
"	else if (x2 + edge2.g > 1.f)"
"		adder2 = edge2.a;"
"	float factor3 = clamp(x2 + adder2, 0.f, 1.f);"

"	float x3 = (texUV.y - edge3.r) * edge3.g;"
"	float adder3 = edge3.g / 2.f;"
"	if (x3 < 0.f)"
"		adder3 = edge3.b;"
"	else if (x3 + edge3.g > 1.f)"
"		adder3 = edge3.a;"
"	float factor4 = clamp(x3 + adder3, 0.f, 1.f);"

"	float x4 = (texUV.y - edge4.r) * edge4.g;"
"	float adder4 = edge4.g / 2.f;"
"	if (x4 < 0.f)"
"		adder4 = edge4.b;"
"	else if (x4 + edge4.g > 1.f)"
"		adder4 = edge4.a;"
"	float factor5 = clamp(x4 + adder4, 0.f, 1.f);"


"   factor1 = (factor1 -factor2)*col1.a;"
"   factor2 = (factor2 -factor3)*col2.a;"
"   factor3 = (factor3 - factor4)*col3.a;"
"   factor4 = (factor4 - factor5)*col4.a;"
"   factor5 = (factor5)*col5.a;"

"   float totalAlpha = factor1 + factor2 + factor3 + factor4 + factor5;"


"   color.a = totalAlpha; "
"   color.rgb = (col1.rgb * factor1 + col2.rgb * factor2 + col3.rgb * factor3 + col4.rgb * factor4 + col5.rgb * factor5)/totalAlpha;"
"   color *= fragColor;"
"}												";

static const char segmentsVertexShader5[] =


"#version 330 core\n"
"layout(std140) uniform Canvas"
"{"
"	vec2 dimensions;"
"	int yOfs;"
"	int yMul;"
"};"
"uniform samplerBuffer extrasId;						"
"uniform samplerBuffer colorsId;					"
"layout(location = 0) in ivec2 pos;                     "
"layout(location = 1) in vec4 color;					"
"layout(location = 2) in int extrasOfs;					"
"layout(location = 3) in vec2 uv;						"
"out vec4 fragColor;									"
"out vec2 texUV;										"
"flat out int segments;									"
"flat out int stripesOfs;								"
"flat out vec4 col1; "
"flat out vec4 col2; "
"flat out vec4 col3; "
"flat out vec4 col4; "
"flat out vec4 col5; "
"flat out vec4 col6; "

"void main()											"
"{                                                      "
"   gl_Position.x = pos.x*2/dimensions.x - 1.0;         "
"   gl_Position.y = (yOfs + yMul*pos.y)*2/dimensions.y - 1.0;            "
"   gl_Position.z = 0.0;                                "
"   gl_Position.w = 1.0;                                "
"   fragColor = color;									"
"   vec4 extras = texelFetch(extrasId, extrasOfs);		"
"   segments = int(extras.x);							"
"   stripesOfs = int(extras.y);							"
"	int colorsOfs = extrasOfs+1;						"
"   texUV = uv;											"

"	col1 = texelFetch(colorsId, colorsOfs ); "
"	col2 = texelFetch(colorsId, colorsOfs+1 ); "
"	col3 = texelFetch(colorsId, colorsOfs+2 ); "
"	col4 = texelFetch(colorsId, colorsOfs+3 ); "
"	col5 = texelFetch(colorsId, colorsOfs+4 ); "
"	col6 = texelFetch(colorsId, colorsOfs+5 ); "

"}                                                      ";


static const char segmentsFragmentShader5[] =

"#version 330 core\n"
"uniform samplerBuffer stripesId;				"
"in vec2 texUV;									"
"in vec4 fragColor;								"
"flat in int segments;							"
"flat in int stripesOfs;						"
"flat in vec4 col1; "
"flat in vec4 col2; "
"flat in vec4 col3; "
"flat in vec4 col4; "
"flat in vec4 col5; "
"flat in vec4 col6; "

"out vec4 color;								"
"void main()									"
"{												"
"	vec4 edge1 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1) ); "
"	vec4 edge2 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+1 ); "
"	vec4 edge3 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+2 ); "
"	vec4 edge4 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+3 ); "
"	vec4 edge5 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+4 ); "

"	float factor1 = 1.f; "

"	float x1 = (texUV.y - edge1.r) * edge1.g;"
"	float adder1 = edge1.g / 2.f;"
"	if (x1 < 0.f)"
"		adder1 = edge1.b;"
"	else if (x1 + edge1.g > 1.f)"
"		adder1 = edge1.a;"
"	float factor2 = clamp(x1 + adder1, 0.f, 1.f);"

"	float x2 = (texUV.y - edge2.r) * edge2.g;"
"	float adder2 = edge2.g / 2.f;"
"	if (x2 < 0.f)"
"		adder2 = edge2.b;"
"	else if (x2 + edge2.g > 1.f)"
"		adder2 = edge2.a;"
"	float factor3 = clamp(x2 + adder2, 0.f, 1.f);"

"	float x3 = (texUV.y - edge3.r) * edge3.g;"
"	float adder3 = edge3.g / 2.f;"
"	if (x3 < 0.f)"
"		adder3 = edge3.b;"
"	else if (x3 + edge3.g > 1.f)"
"		adder3 = edge3.a;"
"	float factor4 = clamp(x3 + adder3, 0.f, 1.f);"

"	float x4 = (texUV.y - edge4.r) * edge4.g;"
"	float adder4 = edge4.g / 2.f;"
"	if (x4 < 0.f)"
"		adder4 = edge4.b;"
"	else if (x4 + edge4.g > 1.f)"
"		adder4 = edge4.a;"
"	float factor5 = clamp(x4 + adder4, 0.f, 1.f);"

"	float x5 = (texUV.y - edge5.r) * edge5.g;"
"	float adder5 = edge5.g / 2.f;"
"	if (x5 < 0.f)"
"		adder5 = edge5.b;"
"	else if (x5 + edge5.g > 1.f)"
"		adder5 = edge5.a;"
"	float factor6 = clamp(x5 + adder5, 0.f, 1.f);"


"   factor1 = (factor1 -factor2)*col1.a;"
"   factor2 = (factor2 -factor3)*col2.a;"
"   factor3 = (factor3 - factor4)*col3.a;"
"   factor4 = (factor4 - factor5)*col4.a;"
"   factor5 = (factor5 - factor6)*col5.a;"
"   factor6 = (factor6)*col6.a;"

"   float totalAlpha = factor1 + factor2 + factor3 + factor4 + factor5 + factor6;"


"   color.a = totalAlpha; "
"   color.rgb = (col1.rgb * factor1 + col2.rgb * factor2 + col3.rgb * factor3 + col4.rgb * factor4 + col5.rgb * factor5 + col6.rgb * factor6)/totalAlpha;"
"   color *= fragColor;"
"}												";


static const char segmentsVertexShader6[] =


"#version 330 core\n"
"layout(std140) uniform Canvas"
"{"
"	vec2 dimensions;"
"	int yOfs;"
"	int yMul;"
"};"
"uniform samplerBuffer extrasId;						"
"uniform samplerBuffer colorsId;					"
"layout(location = 0) in ivec2 pos;                     "
"layout(location = 1) in vec4 color;					"
"layout(location = 2) in int extrasOfs;					"
"layout(location = 3) in vec2 uv;						"
"out vec4 fragColor;									"
"out vec2 texUV;										"
"flat out int segments;									"
"flat out int stripesOfs;								"
"flat out vec4 col1; "
"flat out vec4 col2; "
"flat out vec4 col3; "
"flat out vec4 col4; "
"flat out vec4 col5; "
"flat out vec4 col6; "
"flat out vec4 col7; "

"void main()											"
"{                                                      "
"   gl_Position.x = pos.x*2/dimensions.x - 1.0;         "
"   gl_Position.y = (yOfs + yMul*pos.y)*2/dimensions.y - 1.0;            "
"   gl_Position.z = 0.0;                                "
"   gl_Position.w = 1.0;                                "
"   fragColor = color;									"
"   vec4 extras = texelFetch(extrasId, extrasOfs);		"
"   segments = int(extras.x);							"
"   stripesOfs = int(extras.y);							"
"	int colorsOfs = extrasOfs+1;						"
"   texUV = uv;											"

"	col1 = texelFetch(colorsId, colorsOfs ); "
"	col2 = texelFetch(colorsId, colorsOfs+1 ); "
"	col3 = texelFetch(colorsId, colorsOfs+2 ); "
"	col4 = texelFetch(colorsId, colorsOfs+3 ); "
"	col5 = texelFetch(colorsId, colorsOfs+4 ); "
"	col6 = texelFetch(colorsId, colorsOfs+5 ); "
"	col7 = texelFetch(colorsId, colorsOfs+6 ); "

"}                                                      ";


static const char segmentsFragmentShader6[] =

"#version 330 core\n"
"uniform samplerBuffer stripesId;				"
"in vec2 texUV;									"
"in vec4 fragColor;								"
"flat in int segments;							"
"flat in int stripesOfs;						"
"flat in vec4 col1; "
"flat in vec4 col2; "
"flat in vec4 col3; "
"flat in vec4 col4; "
"flat in vec4 col5; "
"flat in vec4 col6; "
"flat in vec4 col7; "

"out vec4 color;								"
"void main()									"
"{												"
"	vec4 edge1 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1) ); "
"	vec4 edge2 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+1 ); "
"	vec4 edge3 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+2 ); "
"	vec4 edge4 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+3 ); "
"	vec4 edge5 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+4 ); "
"	vec4 edge6 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+5 ); "

"	float factor1 = 1.f; "

"	float x1 = (texUV.y - edge1.r) * edge1.g;"
"	float adder1 = edge1.g / 2.f;"
"	if (x1 < 0.f)"
"		adder1 = edge1.b;"
"	else if (x1 + edge1.g > 1.f)"
"		adder1 = edge1.a;"
"	float factor2 = clamp(x1 + adder1, 0.f, 1.f);"

"	float x2 = (texUV.y - edge2.r) * edge2.g;"
"	float adder2 = edge2.g / 2.f;"
"	if (x2 < 0.f)"
"		adder2 = edge2.b;"
"	else if (x2 + edge2.g > 1.f)"
"		adder2 = edge2.a;"
"	float factor3 = clamp(x2 + adder2, 0.f, 1.f);"

"	float x3 = (texUV.y - edge3.r) * edge3.g;"
"	float adder3 = edge3.g / 2.f;"
"	if (x3 < 0.f)"
"		adder3 = edge3.b;"
"	else if (x3 + edge3.g > 1.f)"
"		adder3 = edge3.a;"
"	float factor4 = clamp(x3 + adder3, 0.f, 1.f);"

"	float x4 = (texUV.y - edge4.r) * edge4.g;"
"	float adder4 = edge4.g / 2.f;"
"	if (x4 < 0.f)"
"		adder4 = edge4.b;"
"	else if (x4 + edge4.g > 1.f)"
"		adder4 = edge4.a;"
"	float factor5 = clamp(x4 + adder4, 0.f, 1.f);"

"	float x5 = (texUV.y - edge5.r) * edge5.g;"
"	float adder5 = edge5.g / 2.f;"
"	if (x5 < 0.f)"
"		adder5 = edge5.b;"
"	else if (x5 + edge5.g > 1.f)"
"		adder5 = edge5.a;"
"	float factor6 = clamp(x5 + adder5, 0.f, 1.f);"

"	float x6 = (texUV.y - edge6.r) * edge6.g;"
"	float adder6 = edge6.g / 2.f;"
"	if (x6 < 0.f)"
"		adder6 = edge6.b;"
"	else if (x6 + edge6.g > 1.f)"
"		adder6 = edge6.a;"
"	float factor7 = clamp(x6 + adder6, 0.f, 1.f);"


"   factor1 = (factor1 -factor2)*col1.a;"
"   factor2 = (factor2 -factor3)*col2.a;"
"   factor3 = (factor3 - factor4)*col3.a;"
"   factor4 = (factor4 - factor5)*col4.a;"
"   factor5 = (factor5 - factor6)*col5.a;"
"   factor6 = (factor6 - factor7)*col6.a;"
"   factor7 = (factor7)*col7.a;"

"   float totalAlpha = factor1 + factor2 + factor3 + factor4 + factor5 + factor6 + factor7;"


"   color.a = totalAlpha; "
"   color.rgb = (col1.rgb * factor1 + col2.rgb * factor2 + col3.rgb * factor3 + col4.rgb * factor4 + col5.rgb * factor5 + col6.rgb * factor6  + col7.rgb * factor7)/totalAlpha;"
"   color *= fragColor;"
"}												";

static const char segmentsVertexShader7[] =


"#version 330 core\n"
"layout(std140) uniform Canvas"
"{"
"	vec2 dimensions;"
"	int yOfs;"
"	int yMul;"
"};"
"uniform samplerBuffer extrasId;						"
"uniform samplerBuffer colorsId;					"
"layout(location = 0) in ivec2 pos;                     "
"layout(location = 1) in vec4 color;					"
"layout(location = 2) in int extrasOfs;					"
"layout(location = 3) in vec2 uv;						"
"out vec4 fragColor;									"
"out vec2 texUV;										"
"flat out int segments;									"
"flat out int stripesOfs;								"
"flat out vec4 col1; "
"flat out vec4 col2; "
"flat out vec4 col3; "
"flat out vec4 col4; "
"flat out vec4 col5; "
"flat out vec4 col6; "
"flat out vec4 col7; "
"flat out vec4 col8; "

"void main()											"
"{                                                      "
"   gl_Position.x = pos.x*2/dimensions.x - 1.0;         "
"   gl_Position.y = (yOfs + yMul*pos.y)*2/dimensions.y - 1.0;            "
"   gl_Position.z = 0.0;                                "
"   gl_Position.w = 1.0;                                "
"   fragColor = color;									"
"   vec4 extras = texelFetch(extrasId, extrasOfs);		"
"   segments = int(extras.x);							"
"   stripesOfs = int(extras.y);							"
"	int colorsOfs = extrasOfs+1;						"
"   texUV = uv;											"

"	col1 = texelFetch(colorsId, colorsOfs ); "
"	col2 = texelFetch(colorsId, colorsOfs+1 ); "
"	col3 = texelFetch(colorsId, colorsOfs+2 ); "
"	col4 = texelFetch(colorsId, colorsOfs+3 ); "
"	col5 = texelFetch(colorsId, colorsOfs+4 ); "
"	col6 = texelFetch(colorsId, colorsOfs+5 ); "
"	col7 = texelFetch(colorsId, colorsOfs+6 ); "
"	col8 = texelFetch(colorsId, colorsOfs+7 ); "

"}                                                      ";


static const char segmentsFragmentShader7[] =

"#version 330 core\n"
"uniform samplerBuffer stripesId;				"
"in vec2 texUV;									"
"in vec4 fragColor;								"
"flat in int segments;							"
"flat in int stripesOfs;						"
"flat in vec4 col1; "
"flat in vec4 col2; "
"flat in vec4 col3; "
"flat in vec4 col4; "
"flat in vec4 col5; "
"flat in vec4 col6; "
"flat in vec4 col7; "
"flat in vec4 col8; "

"out vec4 color;								"
"void main()									"
"{												"
"	vec4 edge1 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1) ); "
"	vec4 edge2 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+1 ); "
"	vec4 edge3 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+2 ); "
"	vec4 edge4 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+3 ); "
"	vec4 edge5 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+4 ); "
"	vec4 edge6 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+5 ); "
"	vec4 edge7 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+6 ); "

"	float factor1 = 1.f; "

"	float x1 = (texUV.y - edge1.r) * edge1.g;"
"	float adder1 = edge1.g / 2.f;"
"	if (x1 < 0.f)"
"		adder1 = edge1.b;"
"	else if (x1 + edge1.g > 1.f)"
"		adder1 = edge1.a;"
"	float factor2 = clamp(x1 + adder1, 0.f, 1.f);"

"	float x2 = (texUV.y - edge2.r) * edge2.g;"
"	float adder2 = edge2.g / 2.f;"
"	if (x2 < 0.f)"
"		adder2 = edge2.b;"
"	else if (x2 + edge2.g > 1.f)"
"		adder2 = edge2.a;"
"	float factor3 = clamp(x2 + adder2, 0.f, 1.f);"

"	float x3 = (texUV.y - edge3.r) * edge3.g;"
"	float adder3 = edge3.g / 2.f;"
"	if (x3 < 0.f)"
"		adder3 = edge3.b;"
"	else if (x3 + edge3.g > 1.f)"
"		adder3 = edge3.a;"
"	float factor4 = clamp(x3 + adder3, 0.f, 1.f);"

"	float x4 = (texUV.y - edge4.r) * edge4.g;"
"	float adder4 = edge4.g / 2.f;"
"	if (x4 < 0.f)"
"		adder4 = edge4.b;"
"	else if (x4 + edge4.g > 1.f)"
"		adder4 = edge4.a;"
"	float factor5 = clamp(x4 + adder4, 0.f, 1.f);"

"	float x5 = (texUV.y - edge5.r) * edge5.g;"
"	float adder5 = edge5.g / 2.f;"
"	if (x5 < 0.f)"
"		adder5 = edge5.b;"
"	else if (x5 + edge5.g > 1.f)"
"		adder5 = edge5.a;"
"	float factor6 = clamp(x5 + adder5, 0.f, 1.f);"

"	float x6 = (texUV.y - edge6.r) * edge6.g;"
"	float adder6 = edge6.g / 2.f;"
"	if (x6 < 0.f)"
"		adder6 = edge6.b;"
"	else if (x6 + edge6.g > 1.f)"
"		adder6 = edge6.a;"
"	float factor7 = clamp(x6 + adder6, 0.f, 1.f);"

"	float x7 = (texUV.y - edge7.r) * edge7.g;"
"	float adder7 = edge7.g / 2.f;"
"	if (x7 < 0.f)"
"		adder7 = edge7.b;"
"	else if (x7 + edge7.g > 1.f)"
"		adder7 = edge7.a;"
"	float factor8 = clamp(x7 + adder7, 0.f, 1.f);"


"   factor1 = (factor1 -factor2)*col1.a;"
"   factor2 = (factor2 -factor3)*col2.a;"
"   factor3 = (factor3 - factor4)*col3.a;"
"   factor4 = (factor4 - factor5)*col4.a;"
"   factor5 = (factor5 - factor6)*col5.a;"
"   factor6 = (factor6 - factor7)*col6.a;"
"   factor7 = (factor7 - factor8)*col7.a;"
"   factor8 = (factor8)*col8.a;"

"   float totalAlpha = factor1 + factor2 + factor3 + factor4 + factor5 + factor6 + factor7 + factor8;"


"   color.a = totalAlpha; "
"   color.rgb = (col1.rgb * factor1 + col2.rgb * factor2 + col3.rgb * factor3 + col4.rgb * factor4 + col5.rgb * factor5 + col6.rgb * factor6  + col7.rgb * factor7  + col8.rgb * factor8)/totalAlpha;"
"   color *= fragColor;"
"}												";

static const char segmentsVertexShader8[] =

"#version 330 core\n"
"layout(std140) uniform Canvas"
"{"
"	vec2 dimensions;"
"	int yOfs;"
"	int yMul;"
"};"
"uniform samplerBuffer extrasId;						"
"uniform samplerBuffer colorsId;					"
"layout(location = 0) in ivec2 pos;                     "
"layout(location = 1) in vec4 color;					"
"layout(location = 2) in int extrasOfs;					"
"layout(location = 3) in vec2 uv;						"
"out vec4 fragColor;									"
"out vec2 texUV;										"
"flat out int segments;									"
"flat out int stripesOfs;								"
"flat out vec4 col1; "
"flat out vec4 col2; "
"flat out vec4 col3; "
"flat out vec4 col4; "
"flat out vec4 col5; "
"flat out vec4 col6; "
"flat out vec4 col7; "
"flat out vec4 col8; "
"flat out vec4 col9; "

"void main()											"
"{                                                      "
"   gl_Position.x = pos.x*2/dimensions.x - 1.0;         "
"   gl_Position.y = (yOfs + yMul*pos.y)*2/dimensions.y - 1.0;            "
"   gl_Position.z = 0.0;                                "
"   gl_Position.w = 1.0;                                "
"   fragColor = color;									"
"   vec4 extras = texelFetch(extrasId, extrasOfs);		"
"   segments = int(extras.x);							"
"   stripesOfs = int(extras.y);							"
"	int colorsOfs = extrasOfs+1;						"
"   texUV = uv;											"

"	col1 = texelFetch(colorsId, colorsOfs ); "
"	col2 = texelFetch(colorsId, colorsOfs+1 ); "
"	col3 = texelFetch(colorsId, colorsOfs+2 ); "
"	col4 = texelFetch(colorsId, colorsOfs+3 ); "
"	col5 = texelFetch(colorsId, colorsOfs+4 ); "
"	col6 = texelFetch(colorsId, colorsOfs+5 ); "
"	col7 = texelFetch(colorsId, colorsOfs+6 ); "
"	col8 = texelFetch(colorsId, colorsOfs+7 ); "
"	col9 = texelFetch(colorsId, colorsOfs+8 ); "
"}                                                      ";


static const char segmentsFragmentShader8[] =

"#version 330 core\n"
"uniform samplerBuffer stripesId;				"
"in vec2 texUV;									"
"in vec4 fragColor;								"
"flat in int segments;							"
"flat in int stripesOfs;						"
"flat in vec4 col1; "
"flat in vec4 col2; "
"flat in vec4 col3; "
"flat in vec4 col4; "
"flat in vec4 col5; "
"flat in vec4 col6; "
"flat in vec4 col7; "
"flat in vec4 col8; "
"flat in vec4 col9; "

"out vec4 color;								"
"void main()									"
"{												"
"	vec4 edge1 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1) ); "
"	vec4 edge2 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+1 ); "
"	vec4 edge3 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+2 ); "
"	vec4 edge4 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+3 ); "
"	vec4 edge5 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+4 ); "
"	vec4 edge6 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+5 ); "
"	vec4 edge7 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+6 ); "
"	vec4 edge8 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+7 ); "

"	float factor1 = 1.f; "

"	float x1 = (texUV.y - edge1.r) * edge1.g;"
"	float adder1 = edge1.g / 2.f;"
"	if (x1 < 0.f)"
"		adder1 = edge1.b;"
"	else if (x1 + edge1.g > 1.f)"
"		adder1 = edge1.a;"
"	float factor2 = clamp(x1 + adder1, 0.f, 1.f);"

"	float x2 = (texUV.y - edge2.r) * edge2.g;"
"	float adder2 = edge2.g / 2.f;"
"	if (x2 < 0.f)"
"		adder2 = edge2.b;"
"	else if (x2 + edge2.g > 1.f)"
"		adder2 = edge2.a;"
"	float factor3 = clamp(x2 + adder2, 0.f, 1.f);"

"	float x3 = (texUV.y - edge3.r) * edge3.g;"
"	float adder3 = edge3.g / 2.f;"
"	if (x3 < 0.f)"
"		adder3 = edge3.b;"
"	else if (x3 + edge3.g > 1.f)"
"		adder3 = edge3.a;"
"	float factor4 = clamp(x3 + adder3, 0.f, 1.f);"

"	float x4 = (texUV.y - edge4.r) * edge4.g;"
"	float adder4 = edge4.g / 2.f;"
"	if (x4 < 0.f)"
"		adder4 = edge4.b;"
"	else if (x4 + edge4.g > 1.f)"
"		adder4 = edge4.a;"
"	float factor5 = clamp(x4 + adder4, 0.f, 1.f);"

"	float x5 = (texUV.y - edge5.r) * edge5.g;"
"	float adder5 = edge5.g / 2.f;"
"	if (x5 < 0.f)"
"		adder5 = edge5.b;"
"	else if (x5 + edge5.g > 1.f)"
"		adder5 = edge5.a;"
"	float factor6 = clamp(x5 + adder5, 0.f, 1.f);"

"	float x6 = (texUV.y - edge6.r) * edge6.g;"
"	float adder6 = edge6.g / 2.f;"
"	if (x6 < 0.f)"
"		adder6 = edge6.b;"
"	else if (x6 + edge6.g > 1.f)"
"		adder6 = edge6.a;"
"	float factor7 = clamp(x6 + adder6, 0.f, 1.f);"

"	float x7 = (texUV.y - edge7.r) * edge7.g;"
"	float adder7 = edge7.g / 2.f;"
"	if (x7 < 0.f)"
"		adder7 = edge7.b;"
"	else if (x7 + edge7.g > 1.f)"
"		adder7 = edge7.a;"
"	float factor8 = clamp(x7 + adder7, 0.f, 1.f);"

"	float x8 = (texUV.y - edge8.r) * edge8.g;"
"	float adder8 = edge8.g / 2.f;"
"	if (x8 < 0.f)"
"		adder8 = edge8.b;"
"	else if (x8 + edge8.g > 1.f)"
"		adder8 = edge8.a;"
"	float factor9 = clamp(x8 + adder8, 0.f, 1.f);"


"   factor1 = (factor1 -factor2)*col1.a;"
"   factor2 = (factor2 -factor3)*col2.a;"
"   factor3 = (factor3 - factor4)*col3.a;"
"   factor4 = (factor4 - factor5)*col4.a;"
"   factor5 = (factor5 - factor6)*col5.a;"
"   factor6 = (factor6 - factor7)*col6.a;"
"   factor7 = (factor7 - factor8)*col7.a;"
"   factor8 = (factor8 - factor9)*col8.a;"
"   factor9 = (factor9)*col9.a;"

"   float totalAlpha = factor1 + factor2 + factor3 + factor4 + factor5 + factor6 + factor7 + factor8 +"
"					   factor9;"

"   color.a = totalAlpha; "
"   color.rgb = (	col1.rgb * factor1 + col2.rgb * factor2 + col3.rgb * factor3 + col4.rgb * factor4 + "
"					col5.rgb * factor5 + col6.rgb * factor6 + col7.rgb * factor7 + col8.rgb * factor8 + "
"					col9.rgb * factor9)/totalAlpha;"

"   color *= fragColor;"
"}";



static const char segmentsVertexShader9[] =

"#version 330 core\n"
"layout(std140) uniform Canvas"
"{"
"	vec2 dimensions;"
"	int yOfs;"
"	int yMul;"
"};"
"uniform samplerBuffer extrasId;						"
"uniform samplerBuffer colorsId;					"
"layout(location = 0) in ivec2 pos;                     "
"layout(location = 1) in vec4 color;					"
"layout(location = 2) in int extrasOfs;					"
"layout(location = 3) in vec2 uv;						"
"out vec4 fragColor;									"
"out vec2 texUV;										"
"flat out int segments;									"
"flat out int stripesOfs;								"
"flat out vec4 col1; "
"flat out vec4 col2; "
"flat out vec4 col3; "
"flat out vec4 col4; "
"flat out vec4 col5; "
"flat out vec4 col6; "
"flat out vec4 col7; "
"flat out vec4 col8; "
"flat out vec4 col9; "
"flat out vec4 col10; "

"void main()											"
"{                                                      "
"   gl_Position.x = pos.x*2/dimensions.x - 1.0;         "
"   gl_Position.y = (yOfs + yMul*pos.y)*2/dimensions.y - 1.0;            "
"   gl_Position.z = 0.0;                                "
"   gl_Position.w = 1.0;                                "
"   fragColor = color;									"
"   vec4 extras = texelFetch(extrasId, extrasOfs);		"
"   segments = int(extras.x);							"
"   stripesOfs = int(extras.y);							"
"	int colorsOfs = extrasOfs+1;						"
"   texUV = uv;											"

"	col1 = texelFetch(colorsId, colorsOfs ); "
"	col2 = texelFetch(colorsId, colorsOfs+1 ); "
"	col3 = texelFetch(colorsId, colorsOfs+2 ); "
"	col4 = texelFetch(colorsId, colorsOfs+3 ); "
"	col5 = texelFetch(colorsId, colorsOfs+4 ); "
"	col6 = texelFetch(colorsId, colorsOfs+5 ); "
"	col7 = texelFetch(colorsId, colorsOfs+6 ); "
"	col8 = texelFetch(colorsId, colorsOfs+7 ); "
"	col9 = texelFetch(colorsId, colorsOfs+8 ); "
"	col10 = texelFetch(colorsId, colorsOfs+9 ); "
"}                                                      ";


static const char segmentsFragmentShader9[] =

"#version 330 core\n"
"uniform samplerBuffer stripesId;				"
"in vec2 texUV;									"
"in vec4 fragColor;								"
"flat in int segments;							"
"flat in int stripesOfs;						"
"flat in vec4 col1; "
"flat in vec4 col2; "
"flat in vec4 col3; "
"flat in vec4 col4; "
"flat in vec4 col5; "
"flat in vec4 col6; "
"flat in vec4 col7; "
"flat in vec4 col8; "
"flat in vec4 col9; "
"flat in vec4 col10; "

"out vec4 color;								"
"void main()									"
"{												"
"	vec4 edge1 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1) ); "
"	vec4 edge2 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+1 ); "
"	vec4 edge3 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+2 ); "
"	vec4 edge4 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+3 ); "
"	vec4 edge5 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+4 ); "
"	vec4 edge6 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+5 ); "
"	vec4 edge7 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+6 ); "
"	vec4 edge8 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+7 ); "
"	vec4 edge9 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+8 ); "

"	float factor1 = 1.f; "

"	float x1 = (texUV.y - edge1.r) * edge1.g;"
"	float adder1 = edge1.g / 2.f;"
"	if (x1 < 0.f)"
"		adder1 = edge1.b;"
"	else if (x1 + edge1.g > 1.f)"
"		adder1 = edge1.a;"
"	float factor2 = clamp(x1 + adder1, 0.f, 1.f);"

"	float x2 = (texUV.y - edge2.r) * edge2.g;"
"	float adder2 = edge2.g / 2.f;"
"	if (x2 < 0.f)"
"		adder2 = edge2.b;"
"	else if (x2 + edge2.g > 1.f)"
"		adder2 = edge2.a;"
"	float factor3 = clamp(x2 + adder2, 0.f, 1.f);"

"	float x3 = (texUV.y - edge3.r) * edge3.g;"
"	float adder3 = edge3.g / 2.f;"
"	if (x3 < 0.f)"
"		adder3 = edge3.b;"
"	else if (x3 + edge3.g > 1.f)"
"		adder3 = edge3.a;"
"	float factor4 = clamp(x3 + adder3, 0.f, 1.f);"

"	float x4 = (texUV.y - edge4.r) * edge4.g;"
"	float adder4 = edge4.g / 2.f;"
"	if (x4 < 0.f)"
"		adder4 = edge4.b;"
"	else if (x4 + edge4.g > 1.f)"
"		adder4 = edge4.a;"
"	float factor5 = clamp(x4 + adder4, 0.f, 1.f);"

"	float x5 = (texUV.y - edge5.r) * edge5.g;"
"	float adder5 = edge5.g / 2.f;"
"	if (x5 < 0.f)"
"		adder5 = edge5.b;"
"	else if (x5 + edge5.g > 1.f)"
"		adder5 = edge5.a;"
"	float factor6 = clamp(x5 + adder5, 0.f, 1.f);"

"	float x6 = (texUV.y - edge6.r) * edge6.g;"
"	float adder6 = edge6.g / 2.f;"
"	if (x6 < 0.f)"
"		adder6 = edge6.b;"
"	else if (x6 + edge6.g > 1.f)"
"		adder6 = edge6.a;"
"	float factor7 = clamp(x6 + adder6, 0.f, 1.f);"

"	float x7 = (texUV.y - edge7.r) * edge7.g;"
"	float adder7 = edge7.g / 2.f;"
"	if (x7 < 0.f)"
"		adder7 = edge7.b;"
"	else if (x7 + edge7.g > 1.f)"
"		adder7 = edge7.a;"
"	float factor8 = clamp(x7 + adder7, 0.f, 1.f);"

"	float x8 = (texUV.y - edge8.r) * edge8.g;"
"	float adder8 = edge8.g / 2.f;"
"	if (x8 < 0.f)"
"		adder8 = edge8.b;"
"	else if (x8 + edge8.g > 1.f)"
"		adder8 = edge8.a;"
"	float factor9 = clamp(x8 + adder8, 0.f, 1.f);"

"	float x9 = (texUV.y - edge9.r) * edge9.g;"
"	float adder9 = edge9.g / 2.f;"
"	if (x9 < 0.f)"
"		adder9 = edge9.b;"
"	else if (x9 + edge9.g > 1.f)"
"		adder9 = edge9.a;"
"	float factor10 = clamp(x9 + adder9, 0.f, 1.f);"


"   factor1 = (factor1 -factor2)*col1.a;"
"   factor2 = (factor2 -factor3)*col2.a;"
"   factor3 = (factor3 - factor4)*col3.a;"
"   factor4 = (factor4 - factor5)*col4.a;"
"   factor5 = (factor5 - factor6)*col5.a;"
"   factor6 = (factor6 - factor7)*col6.a;"
"   factor7 = (factor7 - factor8)*col7.a;"
"   factor8 = (factor8 - factor9)*col8.a;"
"   factor9 = (factor9 - factor10)*col9.a;"
"   factor10 = (factor10)*col10.a;"

"   float totalAlpha = factor1 + factor2 + factor3 + factor4 + factor5 + factor6 + factor7 + factor8 +"
"					   factor9 + factor10;"

"   color.a = totalAlpha; "
"   color.rgb = (	col1.rgb * factor1 + col2.rgb * factor2 + col3.rgb * factor3 + col4.rgb * factor4 + "
"					col5.rgb * factor5 + col6.rgb * factor6 + col7.rgb * factor7 + col8.rgb * factor8 + "
"					col9.rgb * factor9 + col10.rgb * factor10)/totalAlpha;"

"   color *= fragColor;"
"}";



static const char segmentsVertexShader10[] =

"#version 330 core\n"
"layout(std140) uniform Canvas"
"{"
"	vec2 dimensions;"
"	int yOfs;"
"	int yMul;"
"};"
"uniform samplerBuffer extrasId;						"
"uniform samplerBuffer colorsId;					"
"layout(location = 0) in ivec2 pos;                     "
"layout(location = 1) in vec4 color;					"
"layout(location = 2) in int extrasOfs;					"
"layout(location = 3) in vec2 uv;						"
"out vec4 fragColor;									"
"out vec2 texUV;										"
"flat out int segments;									"
"flat out int stripesOfs;								"
"flat out vec4 col1; "
"flat out vec4 col2; "
"flat out vec4 col3; "
"flat out vec4 col4; "
"flat out vec4 col5; "
"flat out vec4 col6; "
"flat out vec4 col7; "
"flat out vec4 col8; "
"flat out vec4 col9; "
"flat out vec4 col10; "
"flat out vec4 col11; "

"void main()											"
"{                                                      "
"   gl_Position.x = pos.x*2/dimensions.x - 1.0;         "
"   gl_Position.y = (yOfs + yMul*pos.y)*2/dimensions.y - 1.0;            "
"   gl_Position.z = 0.0;                                "
"   gl_Position.w = 1.0;                                "
"   fragColor = color;									"
"   vec4 extras = texelFetch(extrasId, extrasOfs);		"
"   segments = int(extras.x);							"
"   stripesOfs = int(extras.y);							"
"	int colorsOfs = extrasOfs+1;						"
"   texUV = uv;											"

"	col1 = texelFetch(colorsId, colorsOfs ); "
"	col2 = texelFetch(colorsId, colorsOfs+1 ); "
"	col3 = texelFetch(colorsId, colorsOfs+2 ); "
"	col4 = texelFetch(colorsId, colorsOfs+3 ); "
"	col5 = texelFetch(colorsId, colorsOfs+4 ); "
"	col6 = texelFetch(colorsId, colorsOfs+5 ); "
"	col7 = texelFetch(colorsId, colorsOfs+6 ); "
"	col8 = texelFetch(colorsId, colorsOfs+7 ); "
"	col9 = texelFetch(colorsId, colorsOfs+8 ); "
"	col10 = texelFetch(colorsId, colorsOfs+9 ); "
"	col11 = texelFetch(colorsId, colorsOfs+10 ); "
"}                                                      ";


static const char segmentsFragmentShader10[] =

"#version 330 core\n"
"uniform samplerBuffer stripesId;				"
"in vec2 texUV;									"
"in vec4 fragColor;								"
"flat in int segments;							"
"flat in int stripesOfs;						"
"flat in vec4 col1; "
"flat in vec4 col2; "
"flat in vec4 col3; "
"flat in vec4 col4; "
"flat in vec4 col5; "
"flat in vec4 col6; "
"flat in vec4 col7; "
"flat in vec4 col8; "
"flat in vec4 col9; "
"flat in vec4 col10; "
"flat in vec4 col11; "

"out vec4 color;								"
"void main()									"
"{												"
"	vec4 edge1 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1) ); "
"	vec4 edge2 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+1 ); "
"	vec4 edge3 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+2 ); "
"	vec4 edge4 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+3 ); "
"	vec4 edge5 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+4 ); "
"	vec4 edge6 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+5 ); "
"	vec4 edge7 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+6 ); "
"	vec4 edge8 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+7 ); "
"	vec4 edge9 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+8 ); "
"	vec4 edge10 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+9 ); "

"	float factor1 = 1.f; "

"	float x1 = (texUV.y - edge1.r) * edge1.g;"
"	float adder1 = edge1.g / 2.f;"
"	if (x1 < 0.f)"
"		adder1 = edge1.b;"
"	else if (x1 + edge1.g > 1.f)"
"		adder1 = edge1.a;"
"	float factor2 = clamp(x1 + adder1, 0.f, 1.f);"

"	float x2 = (texUV.y - edge2.r) * edge2.g;"
"	float adder2 = edge2.g / 2.f;"
"	if (x2 < 0.f)"
"		adder2 = edge2.b;"
"	else if (x2 + edge2.g > 1.f)"
"		adder2 = edge2.a;"
"	float factor3 = clamp(x2 + adder2, 0.f, 1.f);"

"	float x3 = (texUV.y - edge3.r) * edge3.g;"
"	float adder3 = edge3.g / 2.f;"
"	if (x3 < 0.f)"
"		adder3 = edge3.b;"
"	else if (x3 + edge3.g > 1.f)"
"		adder3 = edge3.a;"
"	float factor4 = clamp(x3 + adder3, 0.f, 1.f);"

"	float x4 = (texUV.y - edge4.r) * edge4.g;"
"	float adder4 = edge4.g / 2.f;"
"	if (x4 < 0.f)"
"		adder4 = edge4.b;"
"	else if (x4 + edge4.g > 1.f)"
"		adder4 = edge4.a;"
"	float factor5 = clamp(x4 + adder4, 0.f, 1.f);"

"	float x5 = (texUV.y - edge5.r) * edge5.g;"
"	float adder5 = edge5.g / 2.f;"
"	if (x5 < 0.f)"
"		adder5 = edge5.b;"
"	else if (x5 + edge5.g > 1.f)"
"		adder5 = edge5.a;"
"	float factor6 = clamp(x5 + adder5, 0.f, 1.f);"

"	float x6 = (texUV.y - edge6.r) * edge6.g;"
"	float adder6 = edge6.g / 2.f;"
"	if (x6 < 0.f)"
"		adder6 = edge6.b;"
"	else if (x6 + edge6.g > 1.f)"
"		adder6 = edge6.a;"
"	float factor7 = clamp(x6 + adder6, 0.f, 1.f);"

"	float x7 = (texUV.y - edge7.r) * edge7.g;"
"	float adder7 = edge7.g / 2.f;"
"	if (x7 < 0.f)"
"		adder7 = edge7.b;"
"	else if (x7 + edge7.g > 1.f)"
"		adder7 = edge7.a;"
"	float factor8 = clamp(x7 + adder7, 0.f, 1.f);"

"	float x8 = (texUV.y - edge8.r) * edge8.g;"
"	float adder8 = edge8.g / 2.f;"
"	if (x8 < 0.f)"
"		adder8 = edge8.b;"
"	else if (x8 + edge8.g > 1.f)"
"		adder8 = edge8.a;"
"	float factor9 = clamp(x8 + adder8, 0.f, 1.f);"

"	float x9 = (texUV.y - edge9.r) * edge9.g;"
"	float adder9 = edge9.g / 2.f;"
"	if (x9 < 0.f)"
"		adder9 = edge9.b;"
"	else if (x9 + edge9.g > 1.f)"
"		adder9 = edge9.a;"
"	float factor10 = clamp(x9 + adder9, 0.f, 1.f);"

"	float x10 = (texUV.y - edge10.r) * edge10.g;"
"	float adder10 = edge10.g / 2.f;"
"	if (x10 < 0.f)"
"		adder10 = edge10.b;"
"	else if (x10 + edge10.g > 1.f)"
"		adder10 = edge10.a;"
"	float factor11 = clamp(x10 + adder10, 0.f, 1.f);"



"   factor1 = (factor1 -factor2)*col1.a;"
"   factor2 = (factor2 -factor3)*col2.a;"
"   factor3 = (factor3 - factor4)*col3.a;"
"   factor4 = (factor4 - factor5)*col4.a;"
"   factor5 = (factor5 - factor6)*col5.a;"
"   factor6 = (factor6 - factor7)*col6.a;"
"   factor7 = (factor7 - factor8)*col7.a;"
"   factor8 = (factor8 - factor9)*col8.a;"
"   factor9 = (factor9 - factor10)*col9.a;"
"   factor10 = (factor10 - factor11)*col10.a;"
"   factor11 = (factor11)*col11.a;"

"   float totalAlpha = factor1 + factor2 + factor3 + factor4 + factor5 + factor6 + factor7 + factor8 +"
"					   factor9 + factor10 + factor11;"

"   color.a = totalAlpha; "
"   color.rgb = (	col1.rgb * factor1 + col2.rgb * factor2 + col3.rgb * factor3 + col4.rgb * factor4 + "
"					col5.rgb * factor5 + col6.rgb * factor6 + col7.rgb * factor7 + col8.rgb * factor8 + "
"					col9.rgb * factor9 + col10.rgb * factor10 + col11.rgb * factor11)/totalAlpha;"

"   color *= fragColor;"
"}";

static const char segmentsVertexShader11[] =

"#version 330 core\n"
"layout(std140) uniform Canvas"
"{"
"	vec2 dimensions;"
"	int yOfs;"
"	int yMul;"
"};"
"uniform samplerBuffer extrasId;						"
"uniform samplerBuffer colorsId;					"
"layout(location = 0) in ivec2 pos;                     "
"layout(location = 1) in vec4 color;					"
"layout(location = 2) in int extrasOfs;					"
"layout(location = 3) in vec2 uv;						"
"out vec4 fragColor;									"
"out vec2 texUV;										"
"flat out int segments;									"
"flat out int stripesOfs;								"
"flat out vec4 col1; "
"flat out vec4 col2; "
"flat out vec4 col3; "
"flat out vec4 col4; "
"flat out vec4 col5; "
"flat out vec4 col6; "
"flat out vec4 col7; "
"flat out vec4 col8; "
"flat out vec4 col9; "
"flat out vec4 col10; "
"flat out vec4 col11; "
"flat out vec4 col12; "

"void main()											"
"{                                                      "
"   gl_Position.x = pos.x*2/dimensions.x - 1.0;         "
"   gl_Position.y = (yOfs + yMul*pos.y)*2/dimensions.y - 1.0;            "
"   gl_Position.z = 0.0;                                "
"   gl_Position.w = 1.0;                                "
"   fragColor = color;									"
"   vec4 extras = texelFetch(extrasId, extrasOfs);		"
"   segments = int(extras.x);							"
"   stripesOfs = int(extras.y);							"
"	int colorsOfs = extrasOfs+1;						"
"   texUV = uv;											"

"	col1 = texelFetch(colorsId, colorsOfs ); "
"	col2 = texelFetch(colorsId, colorsOfs+1 ); "
"	col3 = texelFetch(colorsId, colorsOfs+2 ); "
"	col4 = texelFetch(colorsId, colorsOfs+3 ); "
"	col5 = texelFetch(colorsId, colorsOfs+4 ); "
"	col6 = texelFetch(colorsId, colorsOfs+5 ); "
"	col7 = texelFetch(colorsId, colorsOfs+6 ); "
"	col8 = texelFetch(colorsId, colorsOfs+7 ); "
"	col9 = texelFetch(colorsId, colorsOfs+8 ); "
"	col10 = texelFetch(colorsId, colorsOfs+9 ); "
"	col11 = texelFetch(colorsId, colorsOfs+10 ); "
"	col12 = texelFetch(colorsId, colorsOfs+11 ); "
"}                                                      ";

static const char segmentsFragmentShader11[] =

"#version 330 core\n"
"uniform samplerBuffer stripesId;				"
"in vec2 texUV;									"
"in vec4 fragColor;								"
"flat in int segments;							"
"flat in int stripesOfs;						"
"flat in vec4 col1; "
"flat in vec4 col2; "
"flat in vec4 col3; "
"flat in vec4 col4; "
"flat in vec4 col5; "
"flat in vec4 col6; "
"flat in vec4 col7; "
"flat in vec4 col8; "
"flat in vec4 col9; "
"flat in vec4 col10; "
"flat in vec4 col11; "
"flat in vec4 col12; "

"out vec4 color;								"
"void main()									"
"{												"
"	vec4 edge1 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1) ); "
"	vec4 edge2 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+1 ); "
"	vec4 edge3 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+2 ); "
"	vec4 edge4 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+3 ); "
"	vec4 edge5 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+4 ); "
"	vec4 edge6 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+5 ); "
"	vec4 edge7 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+6 ); "
"	vec4 edge8 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+7 ); "
"	vec4 edge9 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+8 ); "
"	vec4 edge10 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+9 ); "
"	vec4 edge11 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+10 ); "

"	float factor1 = 1.f; "

"	float x1 = (texUV.y - edge1.r) * edge1.g;"
"	float adder1 = edge1.g / 2.f;"
"	if (x1 < 0.f)"
"		adder1 = edge1.b;"
"	else if (x1 + edge1.g > 1.f)"
"		adder1 = edge1.a;"
"	float factor2 = clamp(x1 + adder1, 0.f, 1.f);"

"	float x2 = (texUV.y - edge2.r) * edge2.g;"
"	float adder2 = edge2.g / 2.f;"
"	if (x2 < 0.f)"
"		adder2 = edge2.b;"
"	else if (x2 + edge2.g > 1.f)"
"		adder2 = edge2.a;"
"	float factor3 = clamp(x2 + adder2, 0.f, 1.f);"

"	float x3 = (texUV.y - edge3.r) * edge3.g;"
"	float adder3 = edge3.g / 2.f;"
"	if (x3 < 0.f)"
"		adder3 = edge3.b;"
"	else if (x3 + edge3.g > 1.f)"
"		adder3 = edge3.a;"
"	float factor4 = clamp(x3 + adder3, 0.f, 1.f);"

"	float x4 = (texUV.y - edge4.r) * edge4.g;"
"	float adder4 = edge4.g / 2.f;"
"	if (x4 < 0.f)"
"		adder4 = edge4.b;"
"	else if (x4 + edge4.g > 1.f)"
"		adder4 = edge4.a;"
"	float factor5 = clamp(x4 + adder4, 0.f, 1.f);"

"	float x5 = (texUV.y - edge5.r) * edge5.g;"
"	float adder5 = edge5.g / 2.f;"
"	if (x5 < 0.f)"
"		adder5 = edge5.b;"
"	else if (x5 + edge5.g > 1.f)"
"		adder5 = edge5.a;"
"	float factor6 = clamp(x5 + adder5, 0.f, 1.f);"

"	float x6 = (texUV.y - edge6.r) * edge6.g;"
"	float adder6 = edge6.g / 2.f;"
"	if (x6 < 0.f)"
"		adder6 = edge6.b;"
"	else if (x6 + edge6.g > 1.f)"
"		adder6 = edge6.a;"
"	float factor7 = clamp(x6 + adder6, 0.f, 1.f);"

"	float x7 = (texUV.y - edge7.r) * edge7.g;"
"	float adder7 = edge7.g / 2.f;"
"	if (x7 < 0.f)"
"		adder7 = edge7.b;"
"	else if (x7 + edge7.g > 1.f)"
"		adder7 = edge7.a;"
"	float factor8 = clamp(x7 + adder7, 0.f, 1.f);"

"	float x8 = (texUV.y - edge8.r) * edge8.g;"
"	float adder8 = edge8.g / 2.f;"
"	if (x8 < 0.f)"
"		adder8 = edge8.b;"
"	else if (x8 + edge8.g > 1.f)"
"		adder8 = edge8.a;"
"	float factor9 = clamp(x8 + adder8, 0.f, 1.f);"

"	float x9 = (texUV.y - edge9.r) * edge9.g;"
"	float adder9 = edge9.g / 2.f;"
"	if (x9 < 0.f)"
"		adder9 = edge9.b;"
"	else if (x9 + edge9.g > 1.f)"
"		adder9 = edge9.a;"
"	float factor10 = clamp(x9 + adder9, 0.f, 1.f);"

"	float x10 = (texUV.y - edge10.r) * edge10.g;"
"	float adder10 = edge10.g / 2.f;"
"	if (x10 < 0.f)"
"		adder10 = edge10.b;"
"	else if (x10 + edge10.g > 1.f)"
"		adder10 = edge10.a;"
"	float factor11 = clamp(x10 + adder10, 0.f, 1.f);"

"	float x11 = (texUV.y - edge11.r) * edge11.g;"
"	float adder11 = edge11.g / 2.f;"
"	if (x11 < 0.f)"
"		adder11 = edge11.b;"
"	else if (x11 + edge11.g > 1.f)"
"		adder11 = edge11.a;"
"	float factor12 = clamp(x11 + adder11, 0.f, 1.f);"


"   factor1 = (factor1 -factor2)*col1.a;"
"   factor2 = (factor2 -factor3)*col2.a;"
"   factor3 = (factor3 - factor4)*col3.a;"
"   factor4 = (factor4 - factor5)*col4.a;"
"   factor5 = (factor5 - factor6)*col5.a;"
"   factor6 = (factor6 - factor7)*col6.a;"
"   factor7 = (factor7 - factor8)*col7.a;"
"   factor8 = (factor8 - factor9)*col8.a;"
"   factor9 = (factor9 - factor10)*col9.a;"
"   factor10 = (factor10 - factor11)*col10.a;"
"   factor11 = (factor11 - factor12)*col11.a;"
"   factor12 = (factor12)*col12.a;"

"   float totalAlpha = factor1 + factor2 + factor3 + factor4 + factor5 + factor6 + factor7 + factor8 +"
"					   factor9 + factor10 + factor11 + factor12;"

"   color.a = totalAlpha; "
"   color.rgb = (	col1.rgb * factor1 + col2.rgb * factor2 + col3.rgb * factor3 + col4.rgb * factor4 + "
"					col5.rgb * factor5 + col6.rgb * factor6 + col7.rgb * factor7 + col8.rgb * factor8 + "
"					col9.rgb * factor9 + col10.rgb * factor10 + col11.rgb * factor11 + col12.rgb * factor12)/totalAlpha;"

"   color *= fragColor;"
"}";


static const char segmentsVertexShader12[] =

"#version 330 core\n"
"layout(std140) uniform Canvas"
"{"
"	vec2 dimensions;"
"	int yOfs;"
"	int yMul;"
"};"
"uniform samplerBuffer extrasId;						"
"uniform samplerBuffer colorsId;					"
"layout(location = 0) in ivec2 pos;                     "
"layout(location = 1) in vec4 color;					"
"layout(location = 2) in int extrasOfs;					"
"layout(location = 3) in vec2 uv;						"
"out vec4 fragColor;									"
"out vec2 texUV;										"
"flat out int segments;									"
"flat out int stripesOfs;								"
"flat out vec4 col1; "
"flat out vec4 col2; "
"flat out vec4 col3; "
"flat out vec4 col4; "
"flat out vec4 col5; "
"flat out vec4 col6; "
"flat out vec4 col7; "
"flat out vec4 col8; "
"flat out vec4 col9; "
"flat out vec4 col10; "
"flat out vec4 col11; "
"flat out vec4 col12; "
"flat out vec4 col13; "

"void main()											"
"{                                                      "
"   gl_Position.x = pos.x*2/dimensions.x - 1.0;         "
"   gl_Position.y = (yOfs + yMul*pos.y)*2/dimensions.y - 1.0;            "
"   gl_Position.z = 0.0;                                "
"   gl_Position.w = 1.0;                                "
"   fragColor = color;									"
"   vec4 extras = texelFetch(extrasId, extrasOfs);		"
"   segments = int(extras.x);							"
"   stripesOfs = int(extras.y);							"
"	int colorsOfs = extrasOfs+1;						"
"   texUV = uv;											"

"	col1 = texelFetch(colorsId, colorsOfs ); "
"	col2 = texelFetch(colorsId, colorsOfs+1 ); "
"	col3 = texelFetch(colorsId, colorsOfs+2 ); "
"	col4 = texelFetch(colorsId, colorsOfs+3 ); "
"	col5 = texelFetch(colorsId, colorsOfs+4 ); "
"	col6 = texelFetch(colorsId, colorsOfs+5 ); "
"	col7 = texelFetch(colorsId, colorsOfs+6 ); "
"	col8 = texelFetch(colorsId, colorsOfs+7 ); "
"	col9 = texelFetch(colorsId, colorsOfs+8 ); "
"	col10 = texelFetch(colorsId, colorsOfs+9 ); "
"	col11 = texelFetch(colorsId, colorsOfs+10 ); "
"	col12 = texelFetch(colorsId, colorsOfs+11 ); "
"	col13 = texelFetch(colorsId, colorsOfs+12 ); "

"}                                                      ";


static const char segmentsFragmentShader12[] =

"#version 330 core\n"
"uniform samplerBuffer stripesId;				"
"in vec2 texUV;									"
"in vec4 fragColor;								"
"flat in int segments;							"
"flat in int stripesOfs;						"
"flat in vec4 col1; "
"flat in vec4 col2; "
"flat in vec4 col3; "
"flat in vec4 col4; "
"flat in vec4 col5; "
"flat in vec4 col6; "
"flat in vec4 col7; "
"flat in vec4 col8; "
"flat in vec4 col9; "
"flat in vec4 col10; "
"flat in vec4 col11; "
"flat in vec4 col12; "
"flat in vec4 col13; "

"out vec4 color;								"
"void main()									"
"{												"
"	vec4 edge1 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1) ); "
"	vec4 edge2 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+1 ); "
"	vec4 edge3 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+2 ); "
"	vec4 edge4 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+3 ); "
"	vec4 edge5 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+4 ); "
"	vec4 edge6 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+5 ); "
"	vec4 edge7 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+6 ); "
"	vec4 edge8 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+7 ); "
"	vec4 edge9 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+8 ); "
"	vec4 edge10 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+9 ); "
"	vec4 edge11 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+10 ); "
"	vec4 edge12 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+11 ); "

"	float factor1 = 1.f; "

"	float x1 = (texUV.y - edge1.r) * edge1.g;"
"	float adder1 = edge1.g / 2.f;"
"	if (x1 < 0.f)"
"		adder1 = edge1.b;"
"	else if (x1 + edge1.g > 1.f)"
"		adder1 = edge1.a;"
"	float factor2 = clamp(x1 + adder1, 0.f, 1.f);"

"	float x2 = (texUV.y - edge2.r) * edge2.g;"
"	float adder2 = edge2.g / 2.f;"
"	if (x2 < 0.f)"
"		adder2 = edge2.b;"
"	else if (x2 + edge2.g > 1.f)"
"		adder2 = edge2.a;"
"	float factor3 = clamp(x2 + adder2, 0.f, 1.f);"

"	float x3 = (texUV.y - edge3.r) * edge3.g;"
"	float adder3 = edge3.g / 2.f;"
"	if (x3 < 0.f)"
"		adder3 = edge3.b;"
"	else if (x3 + edge3.g > 1.f)"
"		adder3 = edge3.a;"
"	float factor4 = clamp(x3 + adder3, 0.f, 1.f);"

"	float x4 = (texUV.y - edge4.r) * edge4.g;"
"	float adder4 = edge4.g / 2.f;"
"	if (x4 < 0.f)"
"		adder4 = edge4.b;"
"	else if (x4 + edge4.g > 1.f)"
"		adder4 = edge4.a;"
"	float factor5 = clamp(x4 + adder4, 0.f, 1.f);"

"	float x5 = (texUV.y - edge5.r) * edge5.g;"
"	float adder5 = edge5.g / 2.f;"
"	if (x5 < 0.f)"
"		adder5 = edge5.b;"
"	else if (x5 + edge5.g > 1.f)"
"		adder5 = edge5.a;"
"	float factor6 = clamp(x5 + adder5, 0.f, 1.f);"

"	float x6 = (texUV.y - edge6.r) * edge6.g;"
"	float adder6 = edge6.g / 2.f;"
"	if (x6 < 0.f)"
"		adder6 = edge6.b;"
"	else if (x6 + edge6.g > 1.f)"
"		adder6 = edge6.a;"
"	float factor7 = clamp(x6 + adder6, 0.f, 1.f);"

"	float x7 = (texUV.y - edge7.r) * edge7.g;"
"	float adder7 = edge7.g / 2.f;"
"	if (x7 < 0.f)"
"		adder7 = edge7.b;"
"	else if (x7 + edge7.g > 1.f)"
"		adder7 = edge7.a;"
"	float factor8 = clamp(x7 + adder7, 0.f, 1.f);"

"	float x8 = (texUV.y - edge8.r) * edge8.g;"
"	float adder8 = edge8.g / 2.f;"
"	if (x8 < 0.f)"
"		adder8 = edge8.b;"
"	else if (x8 + edge8.g > 1.f)"
"		adder8 = edge8.a;"
"	float factor9 = clamp(x8 + adder8, 0.f, 1.f);"

"	float x9 = (texUV.y - edge9.r) * edge9.g;"
"	float adder9 = edge9.g / 2.f;"
"	if (x9 < 0.f)"
"		adder9 = edge9.b;"
"	else if (x9 + edge9.g > 1.f)"
"		adder9 = edge9.a;"
"	float factor10 = clamp(x9 + adder9, 0.f, 1.f);"

"	float x10 = (texUV.y - edge10.r) * edge10.g;"
"	float adder10 = edge10.g / 2.f;"
"	if (x10 < 0.f)"
"		adder10 = edge10.b;"
"	else if (x10 + edge10.g > 1.f)"
"		adder10 = edge10.a;"
"	float factor11 = clamp(x10 + adder10, 0.f, 1.f);"

"	float x11 = (texUV.y - edge11.r) * edge11.g;"
"	float adder11 = edge11.g / 2.f;"
"	if (x11 < 0.f)"
"		adder11 = edge11.b;"
"	else if (x11 + edge11.g > 1.f)"
"		adder11 = edge11.a;"
"	float factor12 = clamp(x11 + adder11, 0.f, 1.f);"

"	float x12 = (texUV.y - edge12.r) * edge12.g;"
"	float adder12 = edge12.g / 2.f;"
"	if (x12 < 0.f)"
"		adder12 = edge12.b;"
"	else if (x12 + edge12.g > 1.f)"
"		adder12 = edge12.a;"
"	float factor13 = clamp(x12 + adder12, 0.f, 1.f);"


"   factor1 = (factor1 -factor2)*col1.a;"
"   factor2 = (factor2 -factor3)*col2.a;"
"   factor3 = (factor3 - factor4)*col3.a;"
"   factor4 = (factor4 - factor5)*col4.a;"
"   factor5 = (factor5 - factor6)*col5.a;"
"   factor6 = (factor6 - factor7)*col6.a;"
"   factor7 = (factor7 - factor8)*col7.a;"
"   factor8 = (factor8 - factor9)*col8.a;"
"   factor9 = (factor9 - factor10)*col9.a;"
"   factor10 = (factor10 - factor11)*col10.a;"
"   factor11 = (factor11 - factor12)*col11.a;"
"   factor12 = (factor12 - factor13)*col12.a;"
"   factor13 = (factor13)*col13.a;"

"   float totalAlpha = factor1 + factor2 + factor3 + factor4 + factor5 + factor6 + factor7 + factor8 +"
"					   factor9 + factor10 + factor11 + factor12 + factor13;"

"   color.a = totalAlpha; "
"   color.rgb = (	col1.rgb * factor1 + col2.rgb * factor2 + col3.rgb * factor3 + col4.rgb * factor4 + "
"					col5.rgb * factor5 + col6.rgb * factor6 + col7.rgb * factor7 + col8.rgb * factor8 + "
"					col9.rgb * factor9 + col10.rgb * factor10 + col11.rgb * factor11 + col12.rgb * factor12 + "
"					col13.rgb * factor13)/totalAlpha;"

"   color *= fragColor;"
"}";

static const char segmentsVertexShader13[] =

"#version 330 core\n"
"layout(std140) uniform Canvas"
"{"
"	vec2 dimensions;"
"	int yOfs;"
"	int yMul;"
"};"
"uniform samplerBuffer extrasId;						"
"uniform samplerBuffer colorsId;					"
"layout(location = 0) in ivec2 pos;                     "
"layout(location = 1) in vec4 color;					"
"layout(location = 2) in int extrasOfs;					"
"layout(location = 3) in vec2 uv;						"
"out vec4 fragColor;									"
"out vec2 texUV;										"
"flat out int segments;									"
"flat out int stripesOfs;								"
"flat out vec4 col1; "
"flat out vec4 col2; "
"flat out vec4 col3; "
"flat out vec4 col4; "
"flat out vec4 col5; "
"flat out vec4 col6; "
"flat out vec4 col7; "
"flat out vec4 col8; "
"flat out vec4 col9; "
"flat out vec4 col10; "
"flat out vec4 col11; "
"flat out vec4 col12; "
"flat out vec4 col13; "
"flat out vec4 col14; "

"void main()											"
"{                                                      "
"   gl_Position.x = pos.x*2/dimensions.x - 1.0;         "
"   gl_Position.y = (yOfs + yMul*pos.y)*2/dimensions.y - 1.0;            "
"   gl_Position.z = 0.0;                                "
"   gl_Position.w = 1.0;                                "
"   fragColor = color;									"
"   vec4 extras = texelFetch(extrasId, extrasOfs);		"
"   segments = int(extras.x);							"
"   stripesOfs = int(extras.y);							"
"	int colorsOfs = extrasOfs+1;						"
"   texUV = uv;											"

"	col1 = texelFetch(colorsId, colorsOfs ); "
"	col2 = texelFetch(colorsId, colorsOfs+1 ); "
"	col3 = texelFetch(colorsId, colorsOfs+2 ); "
"	col4 = texelFetch(colorsId, colorsOfs+3 ); "
"	col5 = texelFetch(colorsId, colorsOfs+4 ); "
"	col6 = texelFetch(colorsId, colorsOfs+5 ); "
"	col7 = texelFetch(colorsId, colorsOfs+6 ); "
"	col8 = texelFetch(colorsId, colorsOfs+7 ); "
"	col9 = texelFetch(colorsId, colorsOfs+8 ); "
"	col10 = texelFetch(colorsId, colorsOfs+9 ); "
"	col11 = texelFetch(colorsId, colorsOfs+10 ); "
"	col12 = texelFetch(colorsId, colorsOfs+11 ); "
"	col13 = texelFetch(colorsId, colorsOfs+12 ); "
"	col14 = texelFetch(colorsId, colorsOfs+13 ); "

"}                                                      ";


static const char segmentsFragmentShader13[] =

"#version 330 core\n"
"uniform samplerBuffer stripesId;				"
"in vec2 texUV;									"
"in vec4 fragColor;								"
"flat in int segments;							"
"flat in int stripesOfs;						"
"flat in vec4 col1; "
"flat in vec4 col2; "
"flat in vec4 col3; "
"flat in vec4 col4; "
"flat in vec4 col5; "
"flat in vec4 col6; "
"flat in vec4 col7; "
"flat in vec4 col8; "
"flat in vec4 col9; "
"flat in vec4 col10; "
"flat in vec4 col11; "
"flat in vec4 col12; "
"flat in vec4 col13; "
"flat in vec4 col14; "

"out vec4 color;								"
"void main()									"
"{												"
"	vec4 edge1 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1) ); "
"	vec4 edge2 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+1 ); "
"	vec4 edge3 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+2 ); "
"	vec4 edge4 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+3 ); "
"	vec4 edge5 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+4 ); "
"	vec4 edge6 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+5 ); "
"	vec4 edge7 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+6 ); "
"	vec4 edge8 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+7 ); "
"	vec4 edge9 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+8 ); "
"	vec4 edge10 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+9 ); "
"	vec4 edge11 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+10 ); "
"	vec4 edge12 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+11 ); "
"	vec4 edge13 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+12 ); "

"	float factor1 = 1.f; "

"	float x1 = (texUV.y - edge1.r) * edge1.g;"
"	float adder1 = edge1.g / 2.f;"
"	if (x1 < 0.f)"
"		adder1 = edge1.b;"
"	else if (x1 + edge1.g > 1.f)"
"		adder1 = edge1.a;"
"	float factor2 = clamp(x1 + adder1, 0.f, 1.f);"

"	float x2 = (texUV.y - edge2.r) * edge2.g;"
"	float adder2 = edge2.g / 2.f;"
"	if (x2 < 0.f)"
"		adder2 = edge2.b;"
"	else if (x2 + edge2.g > 1.f)"
"		adder2 = edge2.a;"
"	float factor3 = clamp(x2 + adder2, 0.f, 1.f);"

"	float x3 = (texUV.y - edge3.r) * edge3.g;"
"	float adder3 = edge3.g / 2.f;"
"	if (x3 < 0.f)"
"		adder3 = edge3.b;"
"	else if (x3 + edge3.g > 1.f)"
"		adder3 = edge3.a;"
"	float factor4 = clamp(x3 + adder3, 0.f, 1.f);"

"	float x4 = (texUV.y - edge4.r) * edge4.g;"
"	float adder4 = edge4.g / 2.f;"
"	if (x4 < 0.f)"
"		adder4 = edge4.b;"
"	else if (x4 + edge4.g > 1.f)"
"		adder4 = edge4.a;"
"	float factor5 = clamp(x4 + adder4, 0.f, 1.f);"

"	float x5 = (texUV.y - edge5.r) * edge5.g;"
"	float adder5 = edge5.g / 2.f;"
"	if (x5 < 0.f)"
"		adder5 = edge5.b;"
"	else if (x5 + edge5.g > 1.f)"
"		adder5 = edge5.a;"
"	float factor6 = clamp(x5 + adder5, 0.f, 1.f);"

"	float x6 = (texUV.y - edge6.r) * edge6.g;"
"	float adder6 = edge6.g / 2.f;"
"	if (x6 < 0.f)"
"		adder6 = edge6.b;"
"	else if (x6 + edge6.g > 1.f)"
"		adder6 = edge6.a;"
"	float factor7 = clamp(x6 + adder6, 0.f, 1.f);"

"	float x7 = (texUV.y - edge7.r) * edge7.g;"
"	float adder7 = edge7.g / 2.f;"
"	if (x7 < 0.f)"
"		adder7 = edge7.b;"
"	else if (x7 + edge7.g > 1.f)"
"		adder7 = edge7.a;"
"	float factor8 = clamp(x7 + adder7, 0.f, 1.f);"

"	float x8 = (texUV.y - edge8.r) * edge8.g;"
"	float adder8 = edge8.g / 2.f;"
"	if (x8 < 0.f)"
"		adder8 = edge8.b;"
"	else if (x8 + edge8.g > 1.f)"
"		adder8 = edge8.a;"
"	float factor9 = clamp(x8 + adder8, 0.f, 1.f);"

"	float x9 = (texUV.y - edge9.r) * edge9.g;"
"	float adder9 = edge9.g / 2.f;"
"	if (x9 < 0.f)"
"		adder9 = edge9.b;"
"	else if (x9 + edge9.g > 1.f)"
"		adder9 = edge9.a;"
"	float factor10 = clamp(x9 + adder9, 0.f, 1.f);"

"	float x10 = (texUV.y - edge10.r) * edge10.g;"
"	float adder10 = edge10.g / 2.f;"
"	if (x10 < 0.f)"
"		adder10 = edge10.b;"
"	else if (x10 + edge10.g > 1.f)"
"		adder10 = edge10.a;"
"	float factor11 = clamp(x10 + adder10, 0.f, 1.f);"

"	float x11 = (texUV.y - edge11.r) * edge11.g;"
"	float adder11 = edge11.g / 2.f;"
"	if (x11 < 0.f)"
"		adder11 = edge11.b;"
"	else if (x11 + edge11.g > 1.f)"
"		adder11 = edge11.a;"
"	float factor12 = clamp(x11 + adder11, 0.f, 1.f);"

"	float x12 = (texUV.y - edge12.r) * edge12.g;"
"	float adder12 = edge12.g / 2.f;"
"	if (x12 < 0.f)"
"		adder12 = edge12.b;"
"	else if (x12 + edge12.g > 1.f)"
"		adder12 = edge12.a;"
"	float factor13 = clamp(x12 + adder12, 0.f, 1.f);"

"	float x13 = (texUV.y - edge13.r) * edge13.g;"
"	float adder13 = edge13.g / 2.f;"
"	if (x13 < 0.f)"
"		adder13 = edge13.b;"
"	else if (x13 + edge13.g > 1.f)"
"		adder13 = edge13.a;"
"	float factor14 = clamp(x13 + adder13, 0.f, 1.f);"


"   factor1 = (factor1 -factor2)*col1.a;"
"   factor2 = (factor2 -factor3)*col2.a;"
"   factor3 = (factor3 - factor4)*col3.a;"
"   factor4 = (factor4 - factor5)*col4.a;"
"   factor5 = (factor5 - factor6)*col5.a;"
"   factor6 = (factor6 - factor7)*col6.a;"
"   factor7 = (factor7 - factor8)*col7.a;"
"   factor8 = (factor8 - factor9)*col8.a;"
"   factor9 = (factor9 - factor10)*col9.a;"
"   factor10 = (factor10 - factor11)*col10.a;"
"   factor11 = (factor11 - factor12)*col11.a;"
"   factor12 = (factor12 - factor13)*col12.a;"
"   factor13 = (factor13 - factor14)*col13.a;"
"   factor14 = (factor14)*col14.a;"

"   float totalAlpha = factor1 + factor2 + factor3 + factor4 + factor5 + factor6 + factor7 + factor8 +"
"					   factor9 + factor10 + factor11 + factor12 + factor13 + factor14;"

"   color.a = totalAlpha; "
"   color.rgb = (	col1.rgb * factor1 + col2.rgb * factor2 + col3.rgb * factor3 + col4.rgb * factor4 + "
"					col5.rgb * factor5 + col6.rgb * factor6 + col7.rgb * factor7 + col8.rgb * factor8 + "
"					col9.rgb * factor9 + col10.rgb * factor10 + col11.rgb * factor11 + col12.rgb * factor12 + "
"					col13.rgb * factor13 + col14.rgb * factor14)/totalAlpha;"

"   color *= fragColor;"
"}";


static const char segmentsVertexShader14[] =

"#version 330 core\n"
"layout(std140) uniform Canvas"
"{"
"	vec2 dimensions;"
"	int yOfs;"
"	int yMul;"
"};"
"uniform samplerBuffer extrasId;						"
"uniform samplerBuffer colorsId;					"
"layout(location = 0) in ivec2 pos;                     "
"layout(location = 1) in vec4 color;					"
"layout(location = 2) in int extrasOfs;					"
"layout(location = 3) in vec2 uv;						"
"out vec4 fragColor;									"
"out vec2 texUV;										"
"flat out int segments;									"
"flat out int stripesOfs;								"
"flat out vec4 col1; "
"flat out vec4 col2; "
"flat out vec4 col3; "
"flat out vec4 col4; "
"flat out vec4 col5; "
"flat out vec4 col6; "
"flat out vec4 col7; "
"flat out vec4 col8; "
"flat out vec4 col9; "
"flat out vec4 col10; "
"flat out vec4 col11; "
"flat out vec4 col12; "
"flat out vec4 col13; "
"flat out vec4 col14; "
"flat out vec4 col15; "

"void main()											"
"{                                                      "
"   gl_Position.x = pos.x*2/dimensions.x - 1.0;         "
"   gl_Position.y = (yOfs + yMul*pos.y)*2/dimensions.y - 1.0;            "
"   gl_Position.z = 0.0;                                "
"   gl_Position.w = 1.0;                                "
"   fragColor = color;									"
"   vec4 extras = texelFetch(extrasId, extrasOfs);		"
"   segments = int(extras.x);							"
"   stripesOfs = int(extras.y);							"
"	int colorsOfs = extrasOfs+1;						"
"   texUV = uv;											"

"	col1 = texelFetch(colorsId, colorsOfs ); "
"	col2 = texelFetch(colorsId, colorsOfs+1 ); "
"	col3 = texelFetch(colorsId, colorsOfs+2 ); "
"	col4 = texelFetch(colorsId, colorsOfs+3 ); "
"	col5 = texelFetch(colorsId, colorsOfs+4 ); "
"	col6 = texelFetch(colorsId, colorsOfs+5 ); "
"	col7 = texelFetch(colorsId, colorsOfs+6 ); "
"	col8 = texelFetch(colorsId, colorsOfs+7 ); "
"	col9 = texelFetch(colorsId, colorsOfs+8 ); "
"	col10 = texelFetch(colorsId, colorsOfs+9 ); "
"	col11 = texelFetch(colorsId, colorsOfs+10 ); "
"	col12 = texelFetch(colorsId, colorsOfs+11 ); "
"	col13 = texelFetch(colorsId, colorsOfs+12 ); "
"	col14 = texelFetch(colorsId, colorsOfs+13 ); "
"	col15 = texelFetch(colorsId, colorsOfs+14 ); "

"}                                                      ";


static const char segmentsFragmentShader14[] =

"#version 330 core\n"
"uniform samplerBuffer stripesId;				"
"in vec2 texUV;									"
"in vec4 fragColor;								"
"flat in int segments;							"
"flat in int stripesOfs;						"
"flat in vec4 col1; "
"flat in vec4 col2; "
"flat in vec4 col3; "
"flat in vec4 col4; "
"flat in vec4 col5; "
"flat in vec4 col6; "
"flat in vec4 col7; "
"flat in vec4 col8; "
"flat in vec4 col9; "
"flat in vec4 col10; "
"flat in vec4 col11; "
"flat in vec4 col12; "
"flat in vec4 col13; "
"flat in vec4 col14; "
"flat in vec4 col15; "

"out vec4 color;								"
"void main()									"
"{												"
"	vec4 edge1 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1) ); "
"	vec4 edge2 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+1 ); "
"	vec4 edge3 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+2 ); "
"	vec4 edge4 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+3 ); "
"	vec4 edge5 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+4 ); "
"	vec4 edge6 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+5 ); "
"	vec4 edge7 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+6 ); "
"	vec4 edge8 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+7 ); "
"	vec4 edge9 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+8 ); "
"	vec4 edge10 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+9 ); "
"	vec4 edge11 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+10 ); "
"	vec4 edge12 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+11 ); "
"	vec4 edge13 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+12 ); "
"	vec4 edge14 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+13 ); "

"	float factor1 = 1.f; "

"	float x1 = (texUV.y - edge1.r) * edge1.g;"
"	float adder1 = edge1.g / 2.f;"
"	if (x1 < 0.f)"
"		adder1 = edge1.b;"
"	else if (x1 + edge1.g > 1.f)"
"		adder1 = edge1.a;"
"	float factor2 = clamp(x1 + adder1, 0.f, 1.f);"

"	float x2 = (texUV.y - edge2.r) * edge2.g;"
"	float adder2 = edge2.g / 2.f;"
"	if (x2 < 0.f)"
"		adder2 = edge2.b;"
"	else if (x2 + edge2.g > 1.f)"
"		adder2 = edge2.a;"
"	float factor3 = clamp(x2 + adder2, 0.f, 1.f);"

"	float x3 = (texUV.y - edge3.r) * edge3.g;"
"	float adder3 = edge3.g / 2.f;"
"	if (x3 < 0.f)"
"		adder3 = edge3.b;"
"	else if (x3 + edge3.g > 1.f)"
"		adder3 = edge3.a;"
"	float factor4 = clamp(x3 + adder3, 0.f, 1.f);"

"	float x4 = (texUV.y - edge4.r) * edge4.g;"
"	float adder4 = edge4.g / 2.f;"
"	if (x4 < 0.f)"
"		adder4 = edge4.b;"
"	else if (x4 + edge4.g > 1.f)"
"		adder4 = edge4.a;"
"	float factor5 = clamp(x4 + adder4, 0.f, 1.f);"

"	float x5 = (texUV.y - edge5.r) * edge5.g;"
"	float adder5 = edge5.g / 2.f;"
"	if (x5 < 0.f)"
"		adder5 = edge5.b;"
"	else if (x5 + edge5.g > 1.f)"
"		adder5 = edge5.a;"
"	float factor6 = clamp(x5 + adder5, 0.f, 1.f);"

"	float x6 = (texUV.y - edge6.r) * edge6.g;"
"	float adder6 = edge6.g / 2.f;"
"	if (x6 < 0.f)"
"		adder6 = edge6.b;"
"	else if (x6 + edge6.g > 1.f)"
"		adder6 = edge6.a;"
"	float factor7 = clamp(x6 + adder6, 0.f, 1.f);"

"	float x7 = (texUV.y - edge7.r) * edge7.g;"
"	float adder7 = edge7.g / 2.f;"
"	if (x7 < 0.f)"
"		adder7 = edge7.b;"
"	else if (x7 + edge7.g > 1.f)"
"		adder7 = edge7.a;"
"	float factor8 = clamp(x7 + adder7, 0.f, 1.f);"

"	float x8 = (texUV.y - edge8.r) * edge8.g;"
"	float adder8 = edge8.g / 2.f;"
"	if (x8 < 0.f)"
"		adder8 = edge8.b;"
"	else if (x8 + edge8.g > 1.f)"
"		adder8 = edge8.a;"
"	float factor9 = clamp(x8 + adder8, 0.f, 1.f);"

"	float x9 = (texUV.y - edge9.r) * edge9.g;"
"	float adder9 = edge9.g / 2.f;"
"	if (x9 < 0.f)"
"		adder9 = edge9.b;"
"	else if (x9 + edge9.g > 1.f)"
"		adder9 = edge9.a;"
"	float factor10 = clamp(x9 + adder9, 0.f, 1.f);"

"	float x10 = (texUV.y - edge10.r) * edge10.g;"
"	float adder10 = edge10.g / 2.f;"
"	if (x10 < 0.f)"
"		adder10 = edge10.b;"
"	else if (x10 + edge10.g > 1.f)"
"		adder10 = edge10.a;"
"	float factor11 = clamp(x10 + adder10, 0.f, 1.f);"

"	float x11 = (texUV.y - edge11.r) * edge11.g;"
"	float adder11 = edge11.g / 2.f;"
"	if (x11 < 0.f)"
"		adder11 = edge11.b;"
"	else if (x11 + edge11.g > 1.f)"
"		adder11 = edge11.a;"
"	float factor12 = clamp(x11 + adder11, 0.f, 1.f);"

"	float x12 = (texUV.y - edge12.r) * edge12.g;"
"	float adder12 = edge12.g / 2.f;"
"	if (x12 < 0.f)"
"		adder12 = edge12.b;"
"	else if (x12 + edge12.g > 1.f)"
"		adder12 = edge12.a;"
"	float factor13 = clamp(x12 + adder12, 0.f, 1.f);"

"	float x13 = (texUV.y - edge13.r) * edge13.g;"
"	float adder13 = edge13.g / 2.f;"
"	if (x13 < 0.f)"
"		adder13 = edge13.b;"
"	else if (x13 + edge13.g > 1.f)"
"		adder13 = edge13.a;"
"	float factor14 = clamp(x13 + adder13, 0.f, 1.f);"

"	float x14 = (texUV.y - edge14.r) * edge14.g;"
"	float adder14 = edge14.g / 2.f;"
"	if (x14 < 0.f)"
"		adder14 = edge14.b;"
"	else if (x14 + edge14.g > 1.f)"
"		adder14 = edge14.a;"
"	float factor15 = clamp(x14 + adder14, 0.f, 1.f);"

"   factor1 = (factor1 -factor2)*col1.a;"
"   factor2 = (factor2 -factor3)*col2.a;"
"   factor3 = (factor3 - factor4)*col3.a;"
"   factor4 = (factor4 - factor5)*col4.a;"
"   factor5 = (factor5 - factor6)*col5.a;"
"   factor6 = (factor6 - factor7)*col6.a;"
"   factor7 = (factor7 - factor8)*col7.a;"
"   factor8 = (factor8 - factor9)*col8.a;"
"   factor9 = (factor9 - factor10)*col9.a;"
"   factor10 = (factor10 - factor11)*col10.a;"
"   factor11 = (factor11 - factor12)*col11.a;"
"   factor12 = (factor12 - factor13)*col12.a;"
"   factor13 = (factor13 - factor14)*col13.a;"
"   factor14 = (factor14 - factor15)*col14.a;"
"   factor15 = (factor15)*col15.a;"

"   float totalAlpha = factor1 + factor2 + factor3 + factor4 + factor5 + factor6 + factor7 + factor8 +"
"					   factor9 + factor10 + factor11 + factor12 + factor13 + factor14 + factor15;"

"   color.a = totalAlpha; "
"   color.rgb = (	col1.rgb * factor1 + col2.rgb * factor2 + col3.rgb * factor3 + col4.rgb * factor4 + "
"					col5.rgb * factor5 + col6.rgb * factor6 + col7.rgb * factor7 + col8.rgb * factor8 + "
"					col9.rgb * factor9 + col10.rgb * factor10 + col11.rgb * factor11 + col12.rgb * factor12 + "
"					col13.rgb * factor13 + col14.rgb * factor14 + col15.rgb * factor15)/totalAlpha;"

"   color *= fragColor;"
"}";



static const char segmentsVertexShader15[] =

"#version 330 core\n"
"layout(std140) uniform Canvas"
"{"
"	vec2 dimensions;"
"	int yOfs;"
"	int yMul;"
"};"
"uniform samplerBuffer extrasId;						"
"uniform samplerBuffer colorsId;					"
"layout(location = 0) in ivec2 pos;                     "
"layout(location = 1) in vec4 color;					"
"layout(location = 2) in int extrasOfs;					"
"layout(location = 3) in vec2 uv;						"
"out vec4 fragColor;									"
"out vec2 texUV;										"
"flat out int segments;									"
"flat out int stripesOfs;								"
"flat out vec4 col1; "
"flat out vec4 col2; "
"flat out vec4 col3; "
"flat out vec4 col4; "
"flat out vec4 col5; "
"flat out vec4 col6; "
"flat out vec4 col7; "
"flat out vec4 col8; "
"flat out vec4 col9; "
"flat out vec4 col10; "
"flat out vec4 col11; "
"flat out vec4 col12; "
"flat out vec4 col13; "
"flat out vec4 col14; "
"flat out vec4 col15; "
"flat out vec4 col16; "

"void main()											"
"{                                                      "
"   gl_Position.x = pos.x*2/dimensions.x - 1.0;         "
"   gl_Position.y = (yOfs + yMul*pos.y)*2/dimensions.y - 1.0;            "
"   gl_Position.z = 0.0;                                "
"   gl_Position.w = 1.0;                                "
"   fragColor = color;									"
"   vec4 extras = texelFetch(extrasId, extrasOfs);		"
"   segments = int(extras.x);							"
"   stripesOfs = int(extras.y);							"
"	int colorsOfs = extrasOfs+1;						"
"   texUV = uv;											"

"	col1 = texelFetch(colorsId, colorsOfs ); "
"	col2 = texelFetch(colorsId, colorsOfs+1 ); "
"	col3 = texelFetch(colorsId, colorsOfs+2 ); "
"	col4 = texelFetch(colorsId, colorsOfs+3 ); "
"	col5 = texelFetch(colorsId, colorsOfs+4 ); "
"	col6 = texelFetch(colorsId, colorsOfs+5 ); "
"	col7 = texelFetch(colorsId, colorsOfs+6 ); "
"	col8 = texelFetch(colorsId, colorsOfs+7 ); "
"	col9 = texelFetch(colorsId, colorsOfs+8 ); "
"	col10 = texelFetch(colorsId, colorsOfs+9 ); "
"	col11 = texelFetch(colorsId, colorsOfs+10 ); "
"	col12 = texelFetch(colorsId, colorsOfs+11 ); "
"	col13 = texelFetch(colorsId, colorsOfs+12 ); "
"	col14 = texelFetch(colorsId, colorsOfs+13 ); "
"	col15 = texelFetch(colorsId, colorsOfs+14 ); "
"	col16 = texelFetch(colorsId, colorsOfs+15 ); "

"}                                                      ";


static const char segmentsFragmentShader15[] =

"#version 330 core\n"
"uniform samplerBuffer stripesId;				"
"in vec2 texUV;									"
"in vec4 fragColor;								"
"flat in int segments;							"
"flat in int stripesOfs;						"
"flat in vec4 col1; "
"flat in vec4 col2; "
"flat in vec4 col3; "
"flat in vec4 col4; "
"flat in vec4 col5; "
"flat in vec4 col6; "
"flat in vec4 col7; "
"flat in vec4 col8; "
"flat in vec4 col9; "
"flat in vec4 col10; "
"flat in vec4 col11; "
"flat in vec4 col12; "
"flat in vec4 col13; "
"flat in vec4 col14; "
"flat in vec4 col15; "
"flat in vec4 col16; "

"out vec4 color;								"
"void main()									"
"{												"
"	vec4 edge1 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1) ); "
"	vec4 edge2 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+1 ); "
"	vec4 edge3 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+2 ); "
"	vec4 edge4 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+3 ); "
"	vec4 edge5 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+4 ); "
"	vec4 edge6 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+5 ); "
"	vec4 edge7 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+6 ); "
"	vec4 edge8 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+7 ); "
"	vec4 edge9 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+8 ); "
"	vec4 edge10 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+9 ); "
"	vec4 edge11 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+10 ); "
"	vec4 edge12 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+11 ); "
"	vec4 edge13 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+12 ); "
"	vec4 edge14 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+13 ); "
"	vec4 edge15 = texelFetch(stripesId, stripesOfs + int(texUV.x)*(segments-1)+14 ); "

"	float factor1 = 1.f; "

"	float x1 = (texUV.y - edge1.r) * edge1.g;"
"	float adder1 = edge1.g / 2.f;"
"	if (x1 < 0.f)"
"		adder1 = edge1.b;"
"	else if (x1 + edge1.g > 1.f)"
"		adder1 = edge1.a;"
"	float factor2 = clamp(x1 + adder1, 0.f, 1.f);"

"	float x2 = (texUV.y - edge2.r) * edge2.g;"
"	float adder2 = edge2.g / 2.f;"
"	if (x2 < 0.f)"
"		adder2 = edge2.b;"
"	else if (x2 + edge2.g > 1.f)"
"		adder2 = edge2.a;"
"	float factor3 = clamp(x2 + adder2, 0.f, 1.f);"

"	float x3 = (texUV.y - edge3.r) * edge3.g;"
"	float adder3 = edge3.g / 2.f;"
"	if (x3 < 0.f)"
"		adder3 = edge3.b;"
"	else if (x3 + edge3.g > 1.f)"
"		adder3 = edge3.a;"
"	float factor4 = clamp(x3 + adder3, 0.f, 1.f);"

"	float x4 = (texUV.y - edge4.r) * edge4.g;"
"	float adder4 = edge4.g / 2.f;"
"	if (x4 < 0.f)"
"		adder4 = edge4.b;"
"	else if (x4 + edge4.g > 1.f)"
"		adder4 = edge4.a;"
"	float factor5 = clamp(x4 + adder4, 0.f, 1.f);"

"	float x5 = (texUV.y - edge5.r) * edge5.g;"
"	float adder5 = edge5.g / 2.f;"
"	if (x5 < 0.f)"
"		adder5 = edge5.b;"
"	else if (x5 + edge5.g > 1.f)"
"		adder5 = edge5.a;"
"	float factor6 = clamp(x5 + adder5, 0.f, 1.f);"

"	float x6 = (texUV.y - edge6.r) * edge6.g;"
"	float adder6 = edge6.g / 2.f;"
"	if (x6 < 0.f)"
"		adder6 = edge6.b;"
"	else if (x6 + edge6.g > 1.f)"
"		adder6 = edge6.a;"
"	float factor7 = clamp(x6 + adder6, 0.f, 1.f);"

"	float x7 = (texUV.y - edge7.r) * edge7.g;"
"	float adder7 = edge7.g / 2.f;"
"	if (x7 < 0.f)"
"		adder7 = edge7.b;"
"	else if (x7 + edge7.g > 1.f)"
"		adder7 = edge7.a;"
"	float factor8 = clamp(x7 + adder7, 0.f, 1.f);"

"	float x8 = (texUV.y - edge8.r) * edge8.g;"
"	float adder8 = edge8.g / 2.f;"
"	if (x8 < 0.f)"
"		adder8 = edge8.b;"
"	else if (x8 + edge8.g > 1.f)"
"		adder8 = edge8.a;"
"	float factor9 = clamp(x8 + adder8, 0.f, 1.f);"

"	float x9 = (texUV.y - edge9.r) * edge9.g;"
"	float adder9 = edge9.g / 2.f;"
"	if (x9 < 0.f)"
"		adder9 = edge9.b;"
"	else if (x9 + edge9.g > 1.f)"
"		adder9 = edge9.a;"
"	float factor10 = clamp(x9 + adder9, 0.f, 1.f);"

"	float x10 = (texUV.y - edge10.r) * edge10.g;"
"	float adder10 = edge10.g / 2.f;"
"	if (x10 < 0.f)"
"		adder10 = edge10.b;"
"	else if (x10 + edge10.g > 1.f)"
"		adder10 = edge10.a;"
"	float factor11 = clamp(x10 + adder10, 0.f, 1.f);"

"	float x11 = (texUV.y - edge11.r) * edge11.g;"
"	float adder11 = edge11.g / 2.f;"
"	if (x11 < 0.f)"
"		adder11 = edge11.b;"
"	else if (x11 + edge11.g > 1.f)"
"		adder11 = edge11.a;"
"	float factor12 = clamp(x11 + adder11, 0.f, 1.f);"

"	float x12 = (texUV.y - edge12.r) * edge12.g;"
"	float adder12 = edge12.g / 2.f;"
"	if (x12 < 0.f)"
"		adder12 = edge12.b;"
"	else if (x12 + edge12.g > 1.f)"
"		adder12 = edge12.a;"
"	float factor13 = clamp(x12 + adder12, 0.f, 1.f);"

"	float x13 = (texUV.y - edge13.r) * edge13.g;"
"	float adder13 = edge13.g / 2.f;"
"	if (x13 < 0.f)"
"		adder13 = edge13.b;"
"	else if (x13 + edge13.g > 1.f)"
"		adder13 = edge13.a;"
"	float factor14 = clamp(x13 + adder13, 0.f, 1.f);"

"	float x14 = (texUV.y - edge14.r) * edge14.g;"
"	float adder14 = edge14.g / 2.f;"
"	if (x14 < 0.f)"
"		adder14 = edge14.b;"
"	else if (x14 + edge14.g > 1.f)"
"		adder14 = edge14.a;"
"	float factor15 = clamp(x14 + adder14, 0.f, 1.f);"

"	float x15 = (texUV.y - edge15.r) * edge15.g;"
"	float adder15 = edge15.g / 2.f;"
"	if (x15 < 0.f)"
"		adder15 = edge15.b;"
"	else if (x15 + edge15.g > 1.f)"
"		adder15 = edge15.a;"
"	float factor16 = clamp(x15 + adder15, 0.f, 1.f);"

"   factor1 = (factor1 -factor2)*col1.a;"
"   factor2 = (factor2 -factor3)*col2.a;"
"   factor3 = (factor3 - factor4)*col3.a;"
"   factor4 = (factor4 - factor5)*col4.a;"
"   factor5 = (factor5 - factor6)*col5.a;"
"   factor6 = (factor6 - factor7)*col6.a;"
"   factor7 = (factor7 - factor8)*col7.a;"
"   factor8 = (factor8 - factor9)*col8.a;"
"   factor9 = (factor9 - factor10)*col9.a;"
"   factor10 = (factor10 - factor11)*col10.a;"
"   factor11 = (factor11 - factor12)*col11.a;"
"   factor12 = (factor12 - factor13)*col12.a;"
"   factor13 = (factor13 - factor14)*col13.a;"
"   factor14 = (factor14 - factor15)*col14.a;"
"   factor15 = (factor15 - factor16)*col15.a;"
"   factor16 = (factor16)*col16.a;"

"   float totalAlpha = factor1 + factor2 + factor3 + factor4 + factor5 + factor6 + factor7 + factor8 +"
"					   factor9 + factor10 + factor11 + factor12 + factor13 + factor14 + factor15 + factor16;"

"   color.a = totalAlpha; "
"   color.rgb = (	col1.rgb * factor1 + col2.rgb * factor2 + col3.rgb * factor3 + col4.rgb * factor4 + "
"	col5.rgb * factor5 + col6.rgb * factor6 + col7.rgb * factor7 + col8.rgb * factor8 + "
"	col9.rgb * factor9 + col10.rgb * factor10 + col11.rgb * factor11 + col12.rgb * factor12 + "
"	col13.rgb * factor13 + col14.rgb * factor14 + col15.rgb * factor15 + col16.rgb * factor16) / totalAlpha; "

"   color *= fragColor;"
"}";





/*
	"	float xQ = (texUV.y - edgeQ.r) * edgeQ.g;"
		"	float adderQ = edgeQ.g / 2.f;"
		"	if (xQ < 0.f)"
		"		adderQ = edgeQ.b;"
		"	if (xQ + edgeQ.g > 1.f)"
		"		adderQ = edgeQ.a;"
		"	float factor5 = clamp(xQ + adderQ, 0.f, 1.f);"
*/


	const char * GlGfxDevice::segmentVertexShaders[c_maxSegments] = { nullptr, segmentsVertexShader1, segmentsVertexShader2, segmentsVertexShader3, segmentsVertexShader4, segmentsVertexShader5, segmentsVertexShader6, segmentsVertexShader7, segmentsVertexShader8, segmentsVertexShader9, segmentsVertexShader10, segmentsVertexShader11, segmentsVertexShader12, segmentsVertexShader13, segmentsVertexShader14, segmentsVertexShader15 };
	const char * GlGfxDevice::segmentFragmentShaders[c_maxSegments] = { nullptr, segmentsFragmentShader1, segmentsFragmentShader2, segmentsFragmentShader3, segmentsFragmentShader4, segmentsFragmentShader5, segmentsFragmentShader6, segmentsFragmentShader7, segmentsFragmentShader8, segmentsFragmentShader9, segmentsFragmentShader10, segmentsFragmentShader11, segmentsFragmentShader12, segmentsFragmentShader13, segmentsFragmentShader14, segmentsFragmentShader15 };


}

#endif //WG_GLSHADERS_DOT_H
