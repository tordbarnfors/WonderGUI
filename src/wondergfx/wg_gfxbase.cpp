
/*=========================================================================

						 >>> WonderGUI <<<

  This file is part of Tord Jansson's WonderGUI Graphics Toolkit
  and copyright (c) Tord Jansson, Sweden [tord.jansson@gmail.com].

							-----------

  The WonderGUI Graphics Toolkit is free software; you can redistribute
  this file and/or modify it under the terms of the GNU General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

							-----------

  The WonderGUI Graphics Toolkit is also available for use in commercial
  closed-source projects under a separate license. Interested parties
  should contact Tord Jansson [tord.jansson@gmail.com] for details.

=========================================================================*/


#include <wg_gfxbase.h>
#include <wg_bitmapcache.h>
#include <wg_pixeltools.h>
#include <wg_edgemaptools.h>
#include <wg_gfxutil.h>


namespace wg
{
	int					GfxBase::s_gfxInitCounter = 0;

	GfxContext_p		GfxBase::s_pGfxContext;

    int 				GfxBase::s_curveTab[c_nCurveTabEntries] = {
        0, 2896, 4094, 5013, 5787, 6468, 7084, 7650, 8176, 8670, 9137, 9580, 10004, 10410, 10800, 11176,
        11540, 11892, 12234, 12566, 12889, 13204, 13512, 13812, 14106, 14393, 14674, 14950, 15221, 15486, 15747, 16003,
        16255, 16503, 16747, 16988, 17224, 17458, 17688, 17914, 18138, 18359, 18577, 18792, 19004, 19214, 19422, 19627,
        19830, 20030, 20228, 20425, 20619, 20811, 21001, 21189, 21376, 21560, 21743, 21924, 22104, 22281, 22458, 22632,
        22806, 22977, 23147, 23316, 23484, 23650, 23815, 23978, 24140, 24301, 24461, 24619, 24777, 24933, 25088, 25242,
        25394, 25546, 25697, 25846, 25995, 26143, 26289, 26435, 26580, 26723, 26866, 27008, 27149, 27289, 27429, 27567,
        27705, 27842, 27978, 28113, 28247, 28381, 28514, 28646, 28777, 28908, 29037, 29167, 29295, 29423, 29550, 29676,
        29802, 29927, 30051, 30175, 30298, 30420, 30542, 30663, 30784, 30904, 31023, 31142, 31260, 31378, 31495, 31612,
        31727, 31843, 31958, 32072, 32186, 32299, 32412, 32524, 32636, 32747, 32858, 32968, 33078, 33187, 33296, 33404,
        33512, 33619, 33726, 33832, 33938, 34044, 34149, 34253, 34357, 34461, 34565, 34667, 34770, 34872, 34974, 35075,
        35176, 35276, 35376, 35476, 35575, 35674, 35772, 35870, 35968, 36065, 36162, 36259, 36355, 36451, 36546, 36641,
        36736, 36830, 36924, 37018, 37111, 37204, 37297, 37389, 37481, 37573, 37664, 37755, 37846, 37936, 38026, 38116,
        38205, 38294, 38383, 38471, 38559, 38647, 38735, 38822, 38909, 38995, 39082, 39168, 39253, 39339, 39424, 39509,
        39593, 39677, 39761, 39845, 39929, 40012, 40095, 40177, 40260, 40342, 40423, 40505, 40586, 40667, 40748, 40829,
        40909, 40989, 41068, 41148, 41227, 41306, 41385, 41463, 41541, 41619, 41697, 41775, 41852, 41929, 42006, 42082,
        42158, 42235, 42310, 42386, 42461, 42536, 42611, 42686, 42760, 42835, 42909, 42982, 43056, 43129, 43202, 43275,
        43348, 43420, 43493, 43565, 43637, 43708, 43780, 43851, 43922, 43992, 44063, 44133, 44204, 44274, 44343, 44413,
        44482, 44551, 44620, 44689, 44758, 44826, 44894, 44962, 45030, 45097, 45165, 45232, 45299, 45366, 45432, 45499,
        45565, 45631, 45697, 45763, 45828, 45894, 45959, 46024, 46089, 46153, 46218, 46282, 46346, 46410, 46474, 46537,
        46600, 46664, 46727, 46790, 46852, 46915, 46977, 47039, 47101, 47163, 47225, 47286, 47348, 47409, 47470, 47531,
        47591, 47652, 47712, 47772, 47832, 47892, 47952, 48011, 48071, 48130, 48189, 48248, 48307, 48365, 48424, 48482,
        48540, 48598, 48656, 48714, 48771, 48829, 48886, 48943, 49000, 49057, 49113, 49170, 49226, 49282, 49338, 49394,
        49450, 49505, 49561, 49616, 49671, 49726, 49781, 49836, 49890, 49945, 49999, 50053, 50107, 50161, 50215, 50269,
        50322, 50375, 50429, 50482, 50535, 50587, 50640, 50692, 50745, 50797, 50849, 50901, 50953, 51005, 51056, 51108,
        51159, 51210, 51261, 51312, 51363, 51414, 51464, 51515, 51565, 51615, 51665, 51715, 51765, 51814, 51864, 51913,
        51962, 52011, 52060, 52109, 52158, 52207, 52255, 52304, 52352, 52400, 52448, 52496, 52544, 52591, 52639, 52686,
        52734, 52781, 52828, 52875, 52921, 52968, 53015, 53061, 53108, 53154, 53200, 53246, 53292, 53337, 53383, 53429,
        53474, 53519, 53564, 53610, 53654, 53699, 53744, 53789, 53833, 53877, 53922, 53966, 54010, 54054, 54098, 54141,
        54185, 54228, 54272, 54315, 54358, 54401, 54444, 54487, 54530, 54572, 54615, 54657, 54700, 54742, 54784, 54826,
        54868, 54909, 54951, 54993, 55034, 55075, 55117, 55158, 55199, 55240, 55280, 55321, 55362, 55402, 55443, 55483,
        55523, 55563, 55603, 55643, 55683, 55722, 55762, 55802, 55841, 55880, 55919, 55958, 55997, 56036, 56075, 56114,
        56152, 56191, 56229, 56267, 56305, 56344, 56381, 56419, 56457, 56495, 56532, 56570, 56607, 56645, 56682, 56719,
        56756, 56793, 56830, 56866, 56903, 56939, 56976, 57012, 57048, 57085, 57121, 57157, 57192, 57228, 57264, 57299,
        57335, 57370, 57406, 57441, 57476, 57511, 57546, 57581, 57615, 57650, 57685, 57719, 57753, 57788, 57822, 57856,
        57890, 57924, 57958, 57991, 58025, 58059, 58092, 58125, 58159, 58192, 58225, 58258, 58291, 58324, 58357, 58389,
        58422, 58454, 58487, 58519, 58551, 58583, 58615, 58647, 58679, 58711, 58743, 58774, 58806, 58837, 58869, 58900,
        58931, 58962, 58993, 59024, 59055, 59086, 59116, 59147, 59178, 59208, 59238, 59269, 59299, 59329, 59359, 59389,
        59418, 59448, 59478, 59507, 59537, 59566, 59596, 59625, 59654, 59683, 59712, 59741, 59770, 59799, 59827, 59856,
        59884, 59913, 59941, 59969, 59997, 60026, 60054, 60081, 60109, 60137, 60165, 60192, 60220, 60247, 60275, 60302,
        60329, 60356, 60383, 60410, 60437, 60464, 60491, 60517, 60544, 60570, 60597, 60623, 60649, 60675, 60702, 60728,
        60753, 60779, 60805, 60831, 60856, 60882, 60907, 60933, 60958, 60983, 61008, 61034, 61059, 61083, 61108, 61133,
        61158, 61182, 61207, 61231, 61256, 61280, 61304, 61328, 61352, 61376, 61400, 61424, 61448, 61472, 61495, 61519,
        61542, 61566, 61589, 61612, 61635, 61659, 61682, 61704, 61727, 61750, 61773, 61795, 61818, 61841, 61863, 61885,
        61908, 61930, 61952, 61974, 61996, 62018, 62040, 62061, 62083, 62105, 62126, 62148, 62169, 62190, 62212, 62233,
        62254, 62275, 62296, 62317, 62337, 62358, 62379, 62399, 62420, 62440, 62461, 62481, 62501, 62521, 62541, 62561,
        62581, 62601, 62621, 62641, 62660, 62680, 62699, 62719, 62738, 62758, 62777, 62796, 62815, 62834, 62853, 62872,
        62891, 62909, 62928, 62947, 62965, 62984, 63002, 63020, 63038, 63057, 63075, 63093, 63111, 63128, 63146, 63164,
        63182, 63199, 63217, 63234, 63252, 63269, 63286, 63303, 63321, 63338, 63355, 63371, 63388, 63405, 63422, 63438,
        63455, 63471, 63488, 63504, 63521, 63537, 63553, 63569, 63585, 63601, 63617, 63633, 63648, 63664, 63680, 63695,
        63711, 63726, 63741, 63757, 63772, 63787, 63802, 63817, 63832, 63847, 63861, 63876, 63891, 63905, 63920, 63934,
        63949, 63963, 63977, 63992, 64006, 64020, 64034, 64048, 64061, 64075, 64089, 64103, 64116, 64130, 64143, 64156,
        64170, 64183, 64196, 64209, 64222, 64235, 64248, 64261, 64274, 64287, 64299, 64312, 64324, 64337, 64349, 64361,
        64374, 64386, 64398, 64410, 64422, 64434, 64446, 64458, 64469, 64481, 64493, 64504, 64516, 64527, 64538, 64550,
        64561, 64572, 64583, 64594, 64605, 64616, 64627, 64637, 64648, 64659, 64669, 64680, 64690, 64700, 64711, 64721,
        64731, 64741, 64751, 64761, 64771, 64781, 64791, 64800, 64810, 64820, 64829, 64839, 64848, 64857, 64866, 64876,
        64885, 64894, 64903, 64912, 64921, 64929, 64938, 64947, 64955, 64964, 64972, 64981, 64989, 64998, 65006, 65014,
        65022, 65030, 65038, 65046, 65054, 65062, 65069, 65077, 65084, 65092, 65099, 65107, 65114, 65121, 65129, 65136,
        65143, 65150, 65157, 65164, 65170, 65177, 65184, 65191, 65197, 65204, 65210, 65216, 65223, 65229, 65235, 65241,
        65247, 65253, 65259, 65265, 65271, 65277, 65282, 65288, 65294, 65299, 65304, 65310, 65315, 65320, 65326, 65331,
        65336, 65341, 65346, 65350, 65355, 65360, 65365, 65369, 65374, 65378, 65383, 65387, 65391, 65396, 65400, 65404,
        65408, 65412, 65416, 65420, 65423, 65427, 65431, 65434, 65438, 65441, 65445, 65448, 65451, 65455, 65458, 65461,
        65464, 65467, 65470, 65473, 65475, 65478, 65481, 65483, 65486, 65488, 65491, 65493, 65495, 65498, 65500, 65502,
        65504, 65506, 65508, 65510, 65511, 65513, 65515, 65516, 65518, 65519, 65521, 65522, 65523, 65525, 65526, 65527,
        65528, 65529, 65530, 65531, 65531, 65532, 65533, 65533, 65534, 65534, 65535, 65535, 65535, 65536, 65536, 65536
    };


	namespace PixelTools
	{
		extern uint8_t* pConv_16_linear_to_8_sRGB;
	}



	//____ init() __________________________________________________________________

	bool GfxBase::init( )
	{
		if( s_gfxInitCounter == 0 )
		{
			if( !GearBase::init() )
			   return false;

			s_pGfxContext = new GfxContext();
			s_pGfxContext->pGearContext = GearBase::context();
			
//			HiColor::_initTables();
//			_genCurveTab();
		}
		
		s_gfxInitCounter++;
		return true;
	}

	//____ exit() __________________________________________________________________

	bool GfxBase::exit()
	{
		if( s_gfxInitCounter > 1 )
		{
			s_gfxInitCounter--;
			return true;
		}
		
		if( s_gfxInitCounter <= 0 )
		{
			throwError(ErrorLevel::SilentError, ErrorCode::IllegalCall, "Call to GfxBase::exit() ignored, not initialized or already exited.", nullptr, &TYPEINFO, __func__, __FILE__, __LINE__);
			return false;
		}
		
		s_gfxInitCounter = 0;

		if( s_pGfxContext->pDefaultBitmapCache )
			s_pGfxContext->pDefaultBitmapCache->clear();

		// We need to make sure our objects are destroyed before continuing.

		s_pGfxContext->pDefaultSurfaceFactory = nullptr;
		s_pGfxContext->pDefaultEdgemapFactory = nullptr;
		s_pGfxContext->pDefaultGfxDevice = nullptr;
		s_pGfxContext->pDefaultBitmapCache = nullptr;
		s_pGfxContext->pDefaultGfxDeviceFactory = nullptr;
		
		s_pGfxContext = nullptr;
		
		delete [] PixelTools::pConv_16_linear_to_8_sRGB;
		PixelTools::pConv_16_linear_to_8_sRGB = nullptr;

		return GearBase::exit();
	}

	//____ setContext() _______________________________________________________

	GfxContext_p GfxBase::setContext( const GfxContext_p& pNewContext )
	{
		auto pOld = s_pGfxContext;
		
		if( pNewContext )
			s_pGfxContext = pNewContext;
		else
			s_pGfxContext = new GfxContext();

		GearBase::setContext(s_pGfxContext->pGearContext);
		s_pGfxContext->pGearContext = GearBase::context();

		return pOld;
	}

	//____ defaultBitmapCache() __________________________________________________

	BitmapCache_p GfxBase::defaultBitmapCache()
	{
		if( s_pGfxContext->pDefaultBitmapCache == nullptr )
			s_pGfxContext->pDefaultBitmapCache = BitmapCache::create(16*1024*1024);

		return s_pGfxContext->pDefaultBitmapCache;
	}

	//____ setDefaultSurfaceFactory() ____________________________________________

	void GfxBase::setDefaultSurfaceFactory( SurfaceFactory * pFactory )
	{
		s_pGfxContext->pDefaultSurfaceFactory = pFactory;
	}

	//____ setDefaultEdgemapFactory() ____________________________________________

	void GfxBase::setDefaultEdgemapFactory(EdgemapFactory* pFactory)
	{
		s_pGfxContext->pDefaultEdgemapFactory = pFactory;
	}

	//____ setDefaultGfxDeviceFactory() ____________________________________________

	void GfxBase::setDefaultGfxDeviceFactory(GfxDeviceFactory* pFactory)
	{
		s_pGfxContext->pDefaultGfxDeviceFactory = pFactory;
	}

	//____ setDefaultGfxDevice() _________________________________________________

	void GfxBase::setDefaultGfxDevice( GfxDevice * pDevice )
	{
		s_pGfxContext->pDefaultGfxDevice = pDevice;
	}

	//____ setDefaultToSRGB() ____________________________________________________

	void GfxBase::setDefaultToSRGB( bool bSRGB )
	{
		s_pGfxContext->bSRGB = bSRGB;
	}

	//____ _genCurveTab() ___________________________________________________________

	void GfxBase::_genCurveTab()
	{
		//		double factor = 3.14159265 / (2.0 * c_nCurveTabEntries);

		for (int i = 0; i < c_nCurveTabEntries; i++)
		{
			double y = 1.f - i / (double)c_nCurveTabEntries;
			s_curveTab[i] = (int)(Util::squareRoot(1.f - y*y)*65536.f);
		}
	}

} // namespace wg
